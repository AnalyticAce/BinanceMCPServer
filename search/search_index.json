{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Binance MCP Server Documentation","text":"<p>Welcome to the comprehensive documentation for the Binance MCP Server - a powerful Model Context Protocol server that enables AI agents to interact seamlessly with the Binance cryptocurrency exchange.</p>"},{"location":"#overview","title":"Overview","text":"<p>The Binance MCP Server provides a standardized interface for AI agents to access Binance's trading and market data APIs through the Model Context Protocol (MCP). Built with FastMCP, it offers 17 robust tools for cryptocurrency trading, portfolio management, and market analysis.</p>"},{"location":"#key-features","title":"Key Features","text":"<p>\ud83d\udd10 Secure API Integration - Robust authentication with Binance API keys - Support for both production and testnet environments - Built-in rate limiting to respect Binance API limits</p> <p>\ud83d\udcca Comprehensive Market Data - Real-time price feeds and ticker information - Order book data with customizable depth - 24-hour trading statistics</p> <p>\ud83d\udcbc Portfolio Management - Account balance tracking across all assets - Position monitoring for futures trading - Profit and loss (P&amp;L) analysis</p> <p>\u26a1 Trading Operations - Create and manage orders (market, limit, stop orders) - Order history and status tracking - Fee information and calculations</p> <p>\ud83c\udfe6 Account Management - Deposit and withdrawal history - Account snapshots and reporting - Liquidation history tracking</p>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"<ul> <li>Setup Guide - Get started with installation and configuration</li> <li>API Reference - Complete documentation of all 17 tools</li> <li>Architecture - Technical overview of the server design</li> <li>Examples - Practical usage examples</li> <li>Configuration - Environment setup and configuration options</li> <li>Contributing - Guidelines for contributors</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#quick-installation","title":"Quick Installation","text":"<pre><code># Install from PyPI (recommended)\npip install binance-mcp-server\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<ol> <li>Install the package: <code>pip install binance-mcp-server</code></li> <li>Configure your API keys: Set <code>BINANCE_API_KEY</code> and <code>BINANCE_API_SECRET</code></li> <li>Run the server: <code>binance-mcp-server</code></li> <li>Connect your MCP client: Use STDIO transport to connect</li> </ol>"},{"location":"#why-choose-the-pypi-package","title":"Why Choose the PyPI Package?","text":"<ul> <li>\ud83c\udfaf Always Latest: Automatically get the latest stable releases</li> <li>\ud83d\udee1\ufe0f Reliable: Thoroughly tested releases with version management  </li> <li>\u26a1 Simple: One command installation and updates</li> <li>\ud83d\udd27 Maintained: Regular updates and security patches</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>\ud83d\udcd6 Full Documentation</li> <li>\ud83d\udc1b Issues &amp; Bug Reports</li> <li>\ud83d\udcac Discussions</li> </ul> <p>Built with \u2764\ufe0f using FastMCP and the python-binance library.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This document provides comprehensive documentation for all 17 tools available in the Binance MCP Server.</p>"},{"location":"api-reference/#response-format","title":"Response Format","text":"<p>All tools return a standardized response format:</p>"},{"location":"api-reference/#success-response","title":"Success Response","text":"<pre><code>{\n  \"success\": true,\n  \"data\": { /* Tool-specific data */ },\n  \"timestamp\": 1704067200000,\n  \"metadata\": {\n    \"source\": \"binance_api\",\n    \"endpoint\": \"tool_name\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#error-response","title":"Error Response","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"type\": \"error_type\",\n    \"message\": \"Human-readable error message\",\n    \"timestamp\": 1704067200000\n  }\n}\n</code></pre>"},{"location":"api-reference/#market-data-tools","title":"Market Data Tools","text":""},{"location":"api-reference/#get_ticker_price","title":"get_ticker_price","text":"<p>Get the current price for a trading symbol.</p> <p>Parameters: - <code>symbol</code> (string, required): Trading pair symbol (e.g., 'BTCUSDT', 'ETHBTC')</p> <p>Example: <pre><code>{\n  \"tool\": \"get_ticker_price\",\n  \"arguments\": {\n    \"symbol\": \"BTCUSDT\"\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"symbol\": \"BTCUSDT\",\n    \"price\": 42350.50\n  },\n  \"timestamp\": 1704067200000,\n  \"metadata\": {\n    \"source\": \"binance_api\",\n    \"endpoint\": \"ticker_price\"\n  }\n}\n</code></pre></p>"},{"location":"api-reference/#get_ticker","title":"get_ticker","text":"<p>Get 24-hour ticker price change statistics for a symbol.</p> <p>Parameters: - <code>symbol</code> (string, required): Trading pair symbol (e.g., 'BTCUSDT', 'ETHUSDT')</p> <p>Example: <pre><code>{\n  \"tool\": \"get_ticker\",\n  \"arguments\": {\n    \"symbol\": \"BTCUSDT\"\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"symbol\": \"BTCUSDT\",\n    \"priceChange\": \"125.50\",\n    \"priceChangePercent\": \"0.297\",\n    \"weightedAvgPrice\": \"42280.15\",\n    \"prevClosePrice\": \"42225.00\",\n    \"lastPrice\": \"42350.50\",\n    \"lastQty\": \"0.001\",\n    \"bidPrice\": \"42350.00\",\n    \"bidQty\": \"1.5\",\n    \"askPrice\": \"42350.50\",\n    \"askQty\": \"2.1\",\n    \"openPrice\": \"42225.00\",\n    \"highPrice\": \"42450.00\",\n    \"lowPrice\": \"41800.00\",\n    \"volume\": \"1234.567\",\n    \"quoteVolume\": \"52234567.89\",\n    \"openTime\": 1704067200000,\n    \"closeTime\": 1704153600000,\n    \"count\": 123456\n  },\n  \"timestamp\": 1704067200000\n}\n</code></pre></p>"},{"location":"api-reference/#get_order_book","title":"get_order_book","text":"<p>Get the current order book (bids/asks) for a trading symbol.</p> <p>Parameters: - <code>symbol</code> (string, required): Trading pair symbol (e.g., 'BTCUSDT', 'ETHBTC') - <code>limit</code> (integer, optional): Number of orders per side (default: 100, max: 5000)</p> <p>Example: <pre><code>{\n  \"tool\": \"get_order_book\",\n  \"arguments\": {\n    \"symbol\": \"BTCUSDT\",\n    \"limit\": 10\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"symbol\": \"BTCUSDT\",\n    \"bids\": [\n      [\"42350.00\", \"1.5\"],\n      [\"42349.50\", \"2.1\"],\n      [\"42349.00\", \"0.8\"]\n    ],\n    \"asks\": [\n      [\"42350.50\", \"2.1\"],\n      [\"42351.00\", \"1.8\"],\n      [\"42351.50\", \"3.2\"]\n    ],\n    \"bidCount\": 3,\n    \"askCount\": 3,\n    \"lastUpdateId\": 123456789\n  },\n  \"timestamp\": 1704067200000\n}\n</code></pre></p>"},{"location":"api-reference/#get_available_assets","title":"get_available_assets","text":"<p>Get a list of all available trading symbols and their information.</p> <p>Parameters: None</p> <p>Example: <pre><code>{\n  \"tool\": \"get_available_assets\",\n  \"arguments\": {}\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"assets\": {\n      \"BTCUSDT\": {\n        \"symbol\": \"BTCUSDT\",\n        \"status\": \"TRADING\",\n        \"baseAsset\": \"BTC\",\n        \"baseAssetPrecision\": 8,\n        \"quoteAsset\": \"USDT\",\n        \"quotePrecision\": 8,\n        \"quoteAssetPrecision\": 8,\n        \"orderTypes\": [\"LIMIT\", \"LIMIT_MAKER\", \"MARKET\", \"STOP_LOSS_LIMIT\", \"TAKE_PROFIT_LIMIT\"],\n        \"icebergAllowed\": true,\n        \"ocoAllowed\": true,\n        \"isSpotTradingAllowed\": true,\n        \"isMarginTradingAllowed\": true,\n        \"filters\": [...]\n      }\n    },\n    \"count\": 2000\n  },\n  \"timestamp\": 1704067200000\n}\n</code></pre></p>"},{"location":"api-reference/#account-management-tools","title":"Account Management Tools","text":""},{"location":"api-reference/#get_balance","title":"get_balance","text":"<p>Get the current account balance for all assets.</p> <p>Parameters: None</p> <p>Example: <pre><code>{\n  \"tool\": \"get_balance\",\n  \"arguments\": {}\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"BTC\": {\n      \"free\": 0.12345678,\n      \"locked\": 0.0\n    },\n    \"USDT\": {\n      \"free\": 1234.56,\n      \"locked\": 100.0\n    },\n    \"ETH\": {\n      \"free\": 2.5,\n      \"locked\": 0.5\n    }\n  },\n  \"timestamp\": 1704067200000\n}\n</code></pre></p>"},{"location":"api-reference/#get_account_snapshot","title":"get_account_snapshot","text":"<p>Get a point-in-time snapshot of account state.</p> <p>Parameters: - <code>account_type</code> (string, optional): Account type (default: \"SPOT\", options: \"SPOT\", \"MARGIN\", \"FUTURES\")</p> <p>Example: <pre><code>{\n  \"tool\": \"get_account_snapshot\",\n  \"arguments\": {\n    \"account_type\": \"SPOT\"\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"code\": 200,\n    \"msg\": \"\",\n    \"snapshotVos\": [\n      {\n        \"data\": {\n          \"balances\": [\n            {\n              \"asset\": \"BTC\",\n              \"free\": \"0.12345678\",\n              \"locked\": \"0.00000000\"\n            }\n          ],\n          \"totalAssetOfBtc\": \"0.12345678\"\n        },\n        \"type\": \"spot\",\n        \"updateTime\": 1704067200000\n      }\n    ]\n  },\n  \"timestamp\": 1704067200000\n}\n</code></pre></p>"},{"location":"api-reference/#get_position_info","title":"get_position_info","text":"<p>Get current position information for futures trading.</p> <p>Parameters: None</p> <p>Example: <pre><code>{\n  \"tool\": \"get_position_info\",\n  \"arguments\": {}\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": [\n    {\n      \"symbol\": \"BTCUSDT\",\n      \"positionAmt\": \"0.001\",\n      \"entryPrice\": \"42000.0\",\n      \"markPrice\": \"42350.50\",\n      \"unRealizedProfit\": \"0.3505\",\n      \"liquidationPrice\": \"0\",\n      \"leverage\": \"10\",\n      \"maxNotionalValue\": \"25000\",\n      \"marginType\": \"isolated\",\n      \"isolatedMargin\": \"42.00000000\",\n      \"isAutoAddMargin\": \"false\",\n      \"positionSide\": \"BOTH\",\n      \"notional\": \"42.3505\",\n      \"isolatedWallet\": \"42.00000000\",\n      \"updateTime\": 1704067200000\n    }\n  ],\n  \"timestamp\": 1704067200000\n}\n</code></pre></p>"},{"location":"api-reference/#get_pnl","title":"get_pnl","text":"<p>Get profit and loss (PnL) information for futures trading.</p> <p>Parameters: None</p> <p>Example: <pre><code>{\n  \"tool\": \"get_pnl\",\n  \"arguments\": {}\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": [\n    {\n      \"symbol\": \"BTCUSDT\",\n      \"income\": \"12.34567890\",\n      \"incomeType\": \"REALIZED_PNL\",\n      \"asset\": \"USDT\",\n      \"time\": 1704067200000,\n      \"info\": \"BTCUSDT\",\n      \"tranId\": 9876543210,\n      \"tradeId\": \"123456789\"\n    }\n  ],\n  \"timestamp\": 1704067200000\n}\n</code></pre></p>"},{"location":"api-reference/#trading-tools","title":"Trading Tools","text":""},{"location":"api-reference/#create_order","title":"create_order","text":"<p>Create a new trading order.</p> <p>Parameters: - <code>symbol</code> (string, required): Trading pair symbol (e.g., 'BTCUSDT') - <code>side</code> (string, required): Order side ('BUY' or 'SELL') - <code>order_type</code> (string, required): Order type ('LIMIT', 'MARKET', 'STOP_LOSS', etc.) - <code>quantity</code> (float, required): Quantity of the asset to buy/sell - <code>price</code> (float, optional): Price for limit orders</p> <p>Example: <pre><code>{\n  \"tool\": \"create_order\",\n  \"arguments\": {\n    \"symbol\": \"BTCUSDT\",\n    \"side\": \"BUY\",\n    \"order_type\": \"LIMIT\",\n    \"quantity\": 0.001,\n    \"price\": 42000.0\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"symbol\": \"BTCUSDT\",\n    \"orderId\": 123456789,\n    \"orderListId\": -1,\n    \"clientOrderId\": \"abc123\",\n    \"transactTime\": 1704067200000,\n    \"price\": \"42000.00000000\",\n    \"origQty\": \"0.00100000\",\n    \"executedQty\": \"0.00000000\",\n    \"cummulativeQuoteQty\": \"0.00000000\",\n    \"status\": \"NEW\",\n    \"timeInForce\": \"GTC\",\n    \"type\": \"LIMIT\",\n    \"side\": \"BUY\",\n    \"fills\": []\n  },\n  \"timestamp\": 1704067200000\n}\n</code></pre></p>"},{"location":"api-reference/#get_orders","title":"get_orders","text":"<p>Get order history for a specific symbol.</p> <p>Parameters: - <code>symbol</code> (string, required): Trading pair symbol (e.g., 'BTCUSDT', 'ETHUSDT') - <code>start_time</code> (integer, optional): Start time for filtering orders (Unix timestamp in ms) - <code>end_time</code> (integer, optional): End time for filtering orders (Unix timestamp in ms)</p> <p>Example: <pre><code>{\n  \"tool\": \"get_orders\",\n  \"arguments\": {\n    \"symbol\": \"BTCUSDT\",\n    \"start_time\": 1704000000000,\n    \"end_time\": 1704086400000\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": [\n    {\n      \"symbol\": \"BTCUSDT\",\n      \"orderId\": 123456789,\n      \"orderListId\": -1,\n      \"clientOrderId\": \"abc123\",\n      \"price\": \"42000.00000000\",\n      \"origQty\": \"0.00100000\",\n      \"executedQty\": \"0.00100000\",\n      \"cummulativeQuoteQty\": \"42.00000000\",\n      \"status\": \"FILLED\",\n      \"timeInForce\": \"GTC\",\n      \"type\": \"LIMIT\",\n      \"side\": \"BUY\",\n      \"stopPrice\": \"0.00000000\",\n      \"icebergQty\": \"0.00000000\",\n      \"time\": 1704067200000,\n      \"updateTime\": 1704067250000,\n      \"isWorking\": true,\n      \"origQuoteOrderQty\": \"0.00000000\"\n    }\n  ],\n  \"timestamp\": 1704067200000\n}\n</code></pre></p>"},{"location":"api-reference/#transaction-history-tools","title":"Transaction History Tools","text":""},{"location":"api-reference/#get_deposit_history","title":"get_deposit_history","text":"<p>Get deposit history for a specific coin.</p> <p>Parameters: - <code>coin</code> (string, required): The coin for which to fetch deposit history (e.g., 'BTC', 'ETH')</p> <p>Example: <pre><code>{\n  \"tool\": \"get_deposit_history\",\n  \"arguments\": {\n    \"coin\": \"BTC\"\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": [\n    {\n      \"amount\": \"0.12345678\",\n      \"coin\": \"BTC\",\n      \"network\": \"BTC\",\n      \"status\": 1,\n      \"address\": \"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\",\n      \"addressTag\": \"\",\n      \"txId\": \"abc123def456\",\n      \"insertTime\": 1704067200000,\n      \"transferType\": 0,\n      \"confirmTimes\": \"1/1\"\n    }\n  ],\n  \"timestamp\": 1704067200000\n}\n</code></pre></p>"},{"location":"api-reference/#get_withdraw_history","title":"get_withdraw_history","text":"<p>Get withdrawal history for a specific coin.</p> <p>Parameters: - <code>coin</code> (string, required): The coin for which to fetch withdrawal history (e.g., 'BTC', 'ETH')</p> <p>Example: <pre><code>{\n  \"tool\": \"get_withdraw_history\",\n  \"arguments\": {\n    \"coin\": \"BTC\"\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": [\n    {\n      \"address\": \"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\",\n      \"amount\": \"0.05000000\",\n      \"applyTime\": \"2024-01-01 12:00:00\",\n      \"coin\": \"BTC\",\n      \"id\": \"abc123def456\",\n      \"withdrawOrderId\": \"def456ghi789\",\n      \"network\": \"BTC\",\n      \"transferType\": 0,\n      \"status\": 6,\n      \"transactionFee\": \"0.0005\",\n      \"confirmNo\": 3,\n      \"info\": \"Withdrawal completed\",\n      \"txId\": \"ghi789jkl012\"\n    }\n  ],\n  \"timestamp\": 1704067200000\n}\n</code></pre></p>"},{"location":"api-reference/#get_deposit_address","title":"get_deposit_address","text":"<p>Get deposit address for a specific coin.</p> <p>Parameters: - <code>coin</code> (string, required): The coin for which to fetch the deposit address (e.g., 'BTC', 'ETH')</p> <p>Example: <pre><code>{\n  \"tool\": \"get_deposit_address\",\n  \"arguments\": {\n    \"coin\": \"BTC\"\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"address\": \"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\",\n    \"coin\": \"BTC\",\n    \"tag\": \"\",\n    \"url\": \"https://btc.com/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\"\n  },\n  \"timestamp\": 1704067200000\n}\n</code></pre></p>"},{"location":"api-reference/#get_liquidation_history","title":"get_liquidation_history","text":"<p>Get liquidation history for futures trading.</p> <p>Parameters: None</p> <p>Example: <pre><code>{\n  \"tool\": \"get_liquidation_history\",\n  \"arguments\": {}\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": [\n    {\n      \"symbol\": \"BTCUSDT\",\n      \"price\": \"40000.00\",\n      \"origQty\": \"0.001\",\n      \"executedQty\": \"0.001\",\n      \"avrPrice\": \"40000.00\",\n      \"status\": \"FILLED\",\n      \"timeInForce\": \"IOC\",\n      \"type\": \"LIMIT\",\n      \"side\": \"SELL\",\n      \"time\": 1704067200000\n    }\n  ],\n  \"timestamp\": 1704067200000\n}\n</code></pre></p>"},{"location":"api-reference/#get_universal_transfer_history","title":"get_universal_transfer_history","text":"<p>Get universal transfer history (transfers between different account types).</p> <p>Parameters: None</p> <p>Example: <pre><code>{\n  \"tool\": \"get_universal_transfer_history\",\n  \"arguments\": {}\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"message\": \"This feature is currently under development\"\n  },\n  \"timestamp\": 1704067200000\n}\n</code></pre></p>"},{"location":"api-reference/#fee-information-tools","title":"Fee Information Tools","text":""},{"location":"api-reference/#get_fee_info","title":"get_fee_info","text":"<p>Get trading fee information for symbols.</p> <p>Parameters: - <code>symbol</code> (string, optional): Specific trading pair symbol. If not provided, returns fees for all symbols</p> <p>Example: <pre><code>{\n  \"tool\": \"get_fee_info\",\n  \"arguments\": {\n    \"symbol\": \"BTCUSDT\"\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": [\n    {\n      \"symbol\": \"BTCUSDT\",\n      \"makerCommission\": \"0.001\",\n      \"takerCommission\": \"0.001\"\n    }\n  ],\n  \"timestamp\": 1704067200000,\n  \"metadata\": {\n    \"source\": \"binance_api\",\n    \"endpoint\": \"trade_fee\"\n  }\n}\n</code></pre></p>"},{"location":"api-reference/#error-types","title":"Error Types","text":"<p>The API can return the following error types:</p>"},{"location":"api-reference/#validation_error","title":"validation_error","text":"<p>Parameter validation failed (invalid symbol format, missing required parameters, etc.)</p>"},{"location":"api-reference/#binance_api_error","title":"binance_api_error","text":"<p>Error from Binance API (invalid API key, insufficient balance, rate limits, etc.)</p>"},{"location":"api-reference/#rate_limit_exceeded","title":"rate_limit_exceeded","text":"<p>API rate limit has been exceeded, retry after waiting</p>"},{"location":"api-reference/#tool_error","title":"tool_error","text":"<p>Unexpected error during tool execution</p>"},{"location":"api-reference/#network_error","title":"network_error","text":"<p>Network connectivity issues or timeouts</p>"},{"location":"api-reference/#rate-limiting","title":"Rate Limiting","text":"<p>All tools are subject to Binance API rate limits: - 1200 requests per minute for most endpoints - 10 requests per second burst limit - Rate limiting is handled automatically by the server</p> <p>When rate limits are exceeded, you'll receive a <code>rate_limit_exceeded</code> error. Wait a few seconds before retrying.</p>"},{"location":"api-reference/#best-practices","title":"Best Practices","text":"<ol> <li>Always check the <code>success</code> field before processing data</li> <li>Handle errors gracefully with appropriate fallback logic  </li> <li>Use testnet (<code>BINANCE_TESTNET=true</code>) for development</li> <li>Respect rate limits - avoid making too many requests too quickly</li> <li>Validate symbols before making requests to avoid API errors</li> <li>Log responses for debugging and monitoring</li> </ol>"},{"location":"architecture/","title":"Architecture Overview","text":""},{"location":"architecture/#system-architecture","title":"System Architecture","text":"<p>The Binance MCP Server is built on a modular architecture that separates concerns and ensures maintainability, security, and performance.</p>"},{"location":"architecture/#core-components","title":"Core Components","text":"<pre><code>graph TB\n    A[MCP Client] --&gt; B[FastMCP Server]\n    B --&gt; C[Tool Router]\n    C --&gt; D[Market Data Tools]\n    C --&gt; E[Account Tools]\n    C --&gt; F[Trading Tools]\n    C --&gt; G[History Tools]\n\n    D --&gt; H[Binance API Client]\n    E --&gt; H\n    F --&gt; H\n    G --&gt; H\n\n    H --&gt; I[Rate Limiter]\n    H --&gt; J[Configuration Manager]\n    H --&gt; K[Error Handler]\n\n    I --&gt; L[Binance Exchange API]\n    J --&gt; L\n    K --&gt; L</code></pre>"},{"location":"architecture/#architecture-layers","title":"Architecture Layers","text":""},{"location":"architecture/#1-mcp-protocol-layer","title":"1. MCP Protocol Layer","text":"<ul> <li>FastMCP Server: Handles MCP protocol communication</li> <li>Transport: STDIO, HTTP, and SSE transport support</li> <li>Tool Registration: Automatic tool discovery and registration</li> </ul>"},{"location":"architecture/#2-application-layer","title":"2. Application Layer","text":"<ul> <li>Tool Modules: 17 specialized tools for different operations</li> <li>Response Formatting: Standardized success/error responses</li> <li>Input Validation: Parameter validation and sanitization</li> </ul>"},{"location":"architecture/#3-service-layer","title":"3. Service Layer","text":"<ul> <li>Binance Client Manager: Centralized API client management</li> <li>Rate Limiting: Intelligent rate limiting to respect API limits</li> <li>Configuration Management: Environment-based configuration</li> </ul>"},{"location":"architecture/#4-infrastructure-layer","title":"4. Infrastructure Layer","text":"<ul> <li>Error Handling: Comprehensive error handling and logging</li> <li>Security: API key management and secure client initialization</li> <li>Monitoring: Request logging and performance tracking</li> </ul>"},{"location":"architecture/#tool-categories","title":"Tool Categories","text":""},{"location":"architecture/#market-data-tools","title":"Market Data Tools","text":"<p>Tools for accessing real-time and historical market information: - get_ticker_price: Current asset prices - get_ticker: 24-hour price statistics - get_order_book: Market depth and order book data - get_available_assets: Exchange trading pairs information</p>"},{"location":"architecture/#account-management-tools","title":"Account Management Tools","text":"<p>Tools for managing account information and balances: - get_balance: Account balances across all assets - get_account_snapshot: Point-in-time account state - get_position_info: Futures position information - get_pnl: Profit and loss calculations</p>"},{"location":"architecture/#trading-tools","title":"Trading Tools","text":"<p>Tools for order management and trading operations: - create_order: Place new trading orders - get_orders: Retrieve order history and status</p>"},{"location":"architecture/#transaction-history-tools","title":"Transaction History Tools","text":"<p>Tools for tracking deposits, withdrawals, and transfers: - get_deposit_history: Deposit transaction history - get_withdraw_history: Withdrawal transaction history - get_deposit_address: Get deposit addresses for assets - get_liquidation_history: Liquidation event history - get_universal_transfer_history: Cross-account transfers</p>"},{"location":"architecture/#fee-information-tools","title":"Fee Information Tools","text":"<p>Tools for accessing trading fee information: - get_fee_info: Trading fee rates and calculations</p>"},{"location":"architecture/#data-flow","title":"Data Flow","text":""},{"location":"architecture/#request-flow","title":"Request Flow","text":"<ol> <li>MCP Client sends tool request via STDIO/HTTP</li> <li>FastMCP Server receives and validates the request</li> <li>Tool Router dispatches to appropriate tool module</li> <li>Tool Module validates parameters and calls Binance API</li> <li>Response flows back through the same path with standardized format</li> </ol>"},{"location":"architecture/#error-handling-flow","title":"Error Handling Flow","text":"<ol> <li>Error Detection at any layer (validation, API, network)</li> <li>Error Classification into categories (validation, API, rate limit, etc.)</li> <li>Error Response creation with standardized format</li> <li>Logging for debugging and monitoring</li> <li>Client Response with actionable error information</li> </ol>"},{"location":"architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture/#api-key-management","title":"API Key Management","text":"<ul> <li>Environment variable-based configuration</li> <li>No hardcoded credentials in source code</li> <li>Support for testnet and production environments</li> </ul>"},{"location":"architecture/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Intelligent rate limiting based on Binance API limits</li> <li>Request queuing and throttling</li> <li>Error responses when limits are exceeded</li> </ul>"},{"location":"architecture/#input-validation","title":"Input Validation","text":"<ul> <li>Parameter type checking and validation</li> <li>Symbol format normalization</li> <li>Order side and type validation</li> <li>Quantity and price validation</li> </ul>"},{"location":"architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>No caching implemented (real-time data priority)</li> <li>Each request fetches fresh data from Binance API</li> <li>Consider implementing caching for non-critical data</li> </ul>"},{"location":"architecture/#connection-management","title":"Connection Management","text":"<ul> <li>Persistent client connections when possible</li> <li>Connection health checking via ping</li> <li>Automatic retry mechanisms for failed requests</li> </ul>"},{"location":"architecture/#resource-usage","title":"Resource Usage","text":"<ul> <li>Minimal memory footprint</li> <li>Efficient JSON parsing and serialization</li> <li>Logging level configuration for performance tuning</li> </ul>"},{"location":"architecture/#configuration-management","title":"Configuration Management","text":""},{"location":"architecture/#environment-variables","title":"Environment Variables","text":"<pre><code>BINANCE_API_KEY=your_api_key        # Required: Binance API key\nBINANCE_API_SECRET=your_secret      # Required: Binance API secret  \nBINANCE_TESTNET=true               # Optional: Use testnet (default: false)\n</code></pre>"},{"location":"architecture/#runtime-configuration","title":"Runtime Configuration","text":"<ul> <li>Dynamic client initialization</li> <li>Environment-based URL selection</li> <li>Configurable logging levels</li> <li>Transport method selection</li> </ul>"},{"location":"architecture/#extensibility","title":"Extensibility","text":""},{"location":"architecture/#adding-new-tools","title":"Adding New Tools","text":"<ol> <li>Create tool module in <code>binance_mcp_server/tools/</code></li> <li>Implement tool function with proper error handling</li> <li>Add tool registration in <code>server.py</code></li> <li>Add tests in <code>tests/test_tools/</code></li> <li>Update documentation</li> </ol>"},{"location":"architecture/#tool-development-guidelines","title":"Tool Development Guidelines","text":"<ul> <li>Use <code>@rate_limited</code> decorator for API calls</li> <li>Follow standardized response format</li> <li>Implement comprehensive error handling</li> <li>Add detailed docstrings and type hints</li> <li>Include usage examples in documentation</li> </ul> <p>This architecture ensures scalability, maintainability, and robust operation while providing a clean interface for AI agents to interact with Binance's cryptocurrency exchange.</p>"},{"location":"configuration/","title":"Configuration Guide","text":""},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>The Binance MCP Server uses environment variables for configuration. This approach ensures security by keeping sensitive credentials out of source code.</p>"},{"location":"configuration/#required-variables","title":"Required Variables","text":"Variable Description Example <code>BINANCE_API_KEY</code> Your Binance API key <code>abc123def456...</code> <code>BINANCE_API_SECRET</code> Your Binance API secret <code>xyz789uvw012...</code>"},{"location":"configuration/#optional-variables","title":"Optional Variables","text":"Variable Default Description Options <code>BINANCE_TESTNET</code> <code>false</code> Use Binance testnet <code>true</code>, <code>false</code>"},{"location":"configuration/#configuration-methods","title":"Configuration Methods","text":""},{"location":"configuration/#method-1-environment-variables-recommended","title":"Method 1: Environment Variables (Recommended)","text":"Linux/macOSWindows PowerShellWindows Command Prompt <pre><code>export BINANCE_API_KEY=\"your_api_key_here\"\nexport BINANCE_API_SECRET=\"your_api_secret_here\"\nexport BINANCE_TESTNET=\"true\"\n</code></pre> <pre><code>$env:BINANCE_API_KEY=\"your_api_key_here\"\n$env:BINANCE_API_SECRET=\"your_api_secret_here\"\n$env:BINANCE_TESTNET=\"true\"\n</code></pre> <pre><code>set BINANCE_API_KEY=your_api_key_here\nset BINANCE_API_SECRET=your_api_secret_here\nset BINANCE_TESTNET=true\n</code></pre>"},{"location":"configuration/#method-2-env-file","title":"Method 2: .env File","text":"<p>Create a <code>.env</code> file in your project directory:</p> <pre><code># .env file\nBINANCE_API_KEY=your_api_key_here\nBINANCE_API_SECRET=your_api_secret_here\nBINANCE_TESTNET=true\n</code></pre> <p>The server will automatically load the <code>.env</code> file using <code>python-dotenv</code>.</p>"},{"location":"configuration/#method-3-mcp-client-configuration","title":"Method 3: MCP Client Configuration","text":"<p>When configuring MCP clients like Claude Desktop, include environment variables in the configuration:</p> <pre><code>{\n  \"mcpServers\": {\n    \"binance\": {\n      \"command\": \"binance-mcp-server\",\n      \"args\": [],\n      \"env\": {\n        \"BINANCE_API_KEY\": \"your_api_key_here\",\n        \"BINANCE_API_SECRET\": \"your_api_secret_here\",\n        \"BINANCE_TESTNET\": \"true\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"configuration/#api-key-management","title":"API Key Management","text":""},{"location":"configuration/#creating-api-keys","title":"Creating API Keys","text":"<ol> <li>Login to Binance: Visit binance.com or binance.us</li> <li>Navigate to API Management: Account \u2192 API Management</li> <li>Create New Key: Click \"Create API\" \u2192 \"System generated\"</li> <li>Set Permissions:</li> <li>\u2705 Enable Reading (Required for market data)</li> <li>\u2705 Enable Spot Trading (Required for trading)</li> <li>\u2705 Enable Futures (Optional, for futures trading)</li> <li>\u274c Enable Withdrawals (Not recommended for security)</li> </ol>"},{"location":"configuration/#api-key-security","title":"API Key Security","text":""},{"location":"configuration/#ip-restrictions-recommended","title":"IP Restrictions (Recommended)","text":"<ul> <li>Add your server's IP address to the allowed list</li> <li>Use \"Restrict access to trusted IPs only\"</li> <li>Update IP restrictions when your server IP changes</li> </ul>"},{"location":"configuration/#key-rotation","title":"Key Rotation","text":"<ul> <li>Rotate API keys regularly (monthly/quarterly)</li> <li>Delete unused API keys</li> <li>Monitor API key usage in Binance account</li> </ul>"},{"location":"configuration/#permissions","title":"Permissions","text":"<ul> <li>Only enable necessary permissions</li> <li>Avoid enabling withdrawal permissions unless absolutely required</li> <li>Use separate keys for different applications</li> </ul>"},{"location":"configuration/#testnet-vs-production","title":"Testnet vs Production","text":""},{"location":"configuration/#testnet-configuration","title":"Testnet Configuration","text":"<pre><code>export BINANCE_TESTNET=\"true\"\n</code></pre> <ul> <li>URL: <code>https://testnet.binance.vision</code></li> <li>Purpose: Development and testing with fake money</li> <li>Benefits: Safe experimentation, no real financial risk</li> <li>Limitations: Reduced functionality, fake data</li> </ul>"},{"location":"configuration/#production-configuration","title":"Production Configuration","text":"<pre><code>export BINANCE_TESTNET=\"false\"  # or omit entirely\n</code></pre> <ul> <li>URL: <code>https://api.binance.com</code></li> <li>Purpose: Live trading with real money</li> <li>Benefits: Full functionality, real market data</li> <li>Requirements: Extra caution, proper risk management</li> </ul>"},{"location":"configuration/#server-configuration","title":"Server Configuration","text":""},{"location":"configuration/#command-line-options","title":"Command Line Options","text":"<pre><code>binance-mcp-server [OPTIONS]\n</code></pre> Option Description Default Example <code>--transport</code> Transport method <code>stdio</code> <code>--transport streamable-http</code> <code>--port</code> Port for HTTP transport <code>8000</code> <code>--port 3000</code> <code>--host</code> Host for HTTP transport <code>localhost</code> <code>--host 0.0.0.0</code> <code>--log-level</code> Logging level <code>INFO</code> <code>--log-level DEBUG</code>"},{"location":"configuration/#transport-options","title":"Transport Options","text":""},{"location":"configuration/#stdio-default","title":"STDIO (Default)","text":"<p><pre><code>binance-mcp-server\n</code></pre> - Best for: MCP clients (Claude, etc.) - Communication: stdin/stdout - Use case: Production MCP integration</p>"},{"location":"configuration/#http","title":"HTTP","text":"<p><pre><code>binance-mcp-server --transport streamable-http --port 8000\n</code></pre> - Best for: Testing and development - Communication: HTTP POST requests - Use case: API testing, debugging</p>"},{"location":"configuration/#sse-server-sent-events","title":"SSE (Server-Sent Events)","text":"<p><pre><code>binance-mcp-server --transport sse --port 8080\n</code></pre> - Best for: Real-time applications - Communication: Server-sent events - Use case: Live data streaming</p>"},{"location":"configuration/#logging-configuration","title":"Logging Configuration","text":""},{"location":"configuration/#log-levels","title":"Log Levels","text":"Level Description Use Case <code>DEBUG</code> Detailed debugging information Development, troubleshooting <code>INFO</code> General information messages Production monitoring <code>WARNING</code> Warning messages Error monitoring <code>ERROR</code> Error messages only Minimal logging"},{"location":"configuration/#example-log-output","title":"Example Log Output","text":"<pre><code># INFO level (default)\n2024-01-01 12:00:00 - binance_mcp_server.server - INFO - Starting Binance MCP Server with stdio transport\n2024-01-01 12:00:01 - binance_mcp_server.utils - INFO - Successfully initialized Binance client (testnet: True)\n2024-01-01 12:00:02 - binance_mcp_server.tools.get_ticker_price - INFO - Tool called: get_ticker_price with symbol=BTCUSDT\n\n# DEBUG level\n2024-01-01 12:00:00 - binance_mcp_server.config - DEBUG - Loading configuration from environment\n2024-01-01 12:00:00 - binance_mcp_server.config - DEBUG - API key loaded: abc123***\n2024-01-01 12:00:00 - binance_mcp_server.config - DEBUG - Testnet mode: True\n</code></pre>"},{"location":"configuration/#configuration-validation","title":"Configuration Validation","text":"<p>The server validates configuration on startup and provides helpful error messages:</p>"},{"location":"configuration/#missing-api-key","title":"Missing API Key","text":"<pre><code>Error: Invalid Binance configuration: BINANCE_API_KEY environment variable is required\n</code></pre>"},{"location":"configuration/#missing-api-secret","title":"Missing API Secret","text":"<pre><code>Error: Invalid Binance configuration: BINANCE_API_SECRET environment variable is required\n</code></pre>"},{"location":"configuration/#invalid-api-credentials","title":"Invalid API Credentials","text":"<pre><code>Error: Binance API error during client initialization: API-key format invalid\n</code></pre>"},{"location":"configuration/#network-issues","title":"Network Issues","text":"<pre><code>Error: Binance request error during client initialization: Connection timeout\n</code></pre>"},{"location":"configuration/#production-deployment","title":"Production Deployment","text":""},{"location":"configuration/#docker-configuration","title":"Docker Configuration","text":"<pre><code>FROM python:3.10-slim\n\nWORKDIR /app\n\n# Install the package\nRUN pip install binance-mcp-server\n\n# Set environment variables\nENV BINANCE_TESTNET=false\n\n# Command to run the server\nCMD [\"binance-mcp-server\"]\n</code></pre> <pre><code># Run with environment variables\ndocker run -e BINANCE_API_KEY=\"your_key\" \\\n           -e BINANCE_API_SECRET=\"your_secret\" \\\n           -e BINANCE_TESTNET=\"false\" \\\n           your-binance-mcp-server\n</code></pre>"},{"location":"configuration/#environment-specific-configuration","title":"Environment-Specific Configuration","text":""},{"location":"configuration/#development","title":"Development","text":"<pre><code># Development environment\nexport BINANCE_TESTNET=\"true\"\nexport LOG_LEVEL=\"DEBUG\"\nbinance-mcp-server --log-level DEBUG\n</code></pre>"},{"location":"configuration/#staging","title":"Staging","text":"<pre><code># Staging environment\nexport BINANCE_TESTNET=\"true\"\nexport LOG_LEVEL=\"INFO\"\nbinance-mcp-server --log-level INFO\n</code></pre>"},{"location":"configuration/#production","title":"Production","text":"<pre><code># Production environment\nexport BINANCE_TESTNET=\"false\"\nexport LOG_LEVEL=\"WARNING\"\nbinance-mcp-server --log-level WARNING\n</code></pre>"},{"location":"configuration/#health-checks","title":"Health Checks","text":"<p>The server provides basic health checking through configuration validation:</p> <pre><code>from binance_mcp_server.config import BinanceConfig\n\ndef health_check():\n    try:\n        config = BinanceConfig()\n        if config.is_valid():\n            return {\"status\": \"healthy\", \"testnet\": config.testnet}\n        else:\n            return {\"status\": \"unhealthy\", \"errors\": config.get_validation_errors()}\n    except Exception as e:\n        return {\"status\": \"error\", \"message\": str(e)}\n</code></pre>"},{"location":"configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"configuration/#common-issues","title":"Common Issues","text":""},{"location":"configuration/#1-environment-variables-not-set","title":"1. Environment Variables Not Set","text":"<p>Problem: Variables set in terminal but not visible to the process</p> <p>Solutions: - Use <code>.env</code> file instead - Check if variables are exported: <code>export VARIABLE=value</code> - Restart terminal/IDE after setting variables</p>"},{"location":"configuration/#2-wrong-testnet-setting","title":"2. Wrong Testnet Setting","text":"<p>Problem: Using production keys with testnet or vice versa</p> <p>Solutions: - Verify <code>BINANCE_TESTNET</code> matches your API key type - Testnet keys only work with testnet endpoints - Production keys only work with production endpoints</p>"},{"location":"configuration/#3-api-key-permissions","title":"3. API Key Permissions","text":"<p>Problem: API operations failing due to insufficient permissions</p> <p>Solutions: - Check API key permissions in Binance account - Enable \"Reading\" and \"Spot Trading\" permissions - Avoid enabling \"Withdrawals\" unless necessary</p>"},{"location":"configuration/#4-ip-restrictions","title":"4. IP Restrictions","text":"<p>Problem: API calls failing due to IP restrictions</p> <p>Solutions: - Add your server IP to allowed list in Binance - Remove IP restrictions for testing - Use VPN if server IP changes frequently</p>"},{"location":"configuration/#configuration-testing","title":"Configuration Testing","text":"<p>Test your configuration before deployment:</p> <pre><code># Test with ticker price (read-only operation)\nbinance-mcp-server --transport streamable-http &amp;\ncurl -X POST http://localhost:8000/call \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"tool\": \"get_ticker_price\", \"arguments\": {\"symbol\": \"BTCUSDT\"}}'\n</code></pre> <p>Expected successful response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"symbol\": \"BTCUSDT\", \n    \"price\": 42350.50\n  },\n  \"timestamp\": 1704067200000\n}\n</code></pre></p>"},{"location":"contributing/","title":"Contributing to Binance MCP Server","text":"<p>Thank you for your interest in contributing to the Binance MCP Server! This document provides guidelines and information for contributors.</p>"},{"location":"contributing/#how-to-contribute","title":"\ud83e\udd1d How to Contribute","text":"<p>When contributing to this repository, please first discuss the changes you wish to make via issue, email, or any other method with the project maintainers before making significant changes.</p>"},{"location":"contributing/#quick-start-for-contributors","title":"Quick Start for Contributors","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally</li> <li>Set up development environment (see Development Guide)</li> <li>Create a feature branch from <code>main</code></li> <li>Make your changes following our coding standards</li> <li>Test thoroughly on testnet</li> <li>Submit a pull request with clear description</li> </ol>"},{"location":"contributing/#development-setup","title":"\ud83d\udee0\ufe0f Development Setup","text":"<p>See our comprehensive Development Guide for detailed setup instructions, including:</p> <ul> <li>Prerequisites and installation</li> <li>Local development environment setup</li> <li>Code formatting and linting</li> <li>Testing guidelines</li> <li>Adding new tools</li> </ul>"},{"location":"contributing/#pull-request-process","title":"\ud83d\udccb Pull Request Process","text":""},{"location":"contributing/#before-submitting","title":"Before Submitting","text":"<ul> <li> Test your changes thoroughly on Binance testnet</li> <li> Run the full test suite and ensure all tests pass</li> <li> Update documentation if you've changed APIs or added features</li> <li> Follow code style guidelines (Black formatting, type hints)</li> <li> Add tests for new functionality</li> <li> Check that build succeeds with your changes</li> </ul>"},{"location":"contributing/#pull-request-requirements","title":"Pull Request Requirements","text":"<ol> <li>Clear description of what the PR does and why</li> <li>Link to related issues if applicable</li> <li>Screenshots for UI changes (if any)</li> <li>Testing evidence that changes work on testnet</li> <li>Documentation updates for new features or API changes</li> <li>Version update if this is a breaking change</li> </ol>"},{"location":"contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated checks must pass (CI/CD, tests, linting)</li> <li>Code review by project maintainers</li> <li>Security review for changes affecting API interactions</li> <li>Documentation review for completeness</li> <li>Final approval and merge</li> </ol>"},{"location":"contributing/#testing-guidelines","title":"\ud83e\uddea Testing Guidelines","text":""},{"location":"contributing/#testing-requirements","title":"Testing Requirements","text":"<ul> <li>Unit tests for all new functions and methods</li> <li>Integration tests for tool interactions with Binance API</li> <li>Error handling tests for various failure scenarios</li> <li>Mock tests to avoid real API calls during development</li> </ul>"},{"location":"contributing/#testing-on-testnet","title":"Testing on Testnet","text":"<p>Always test new features on Binance testnet:</p> <pre><code>export BINANCE_TESTNET=\"true\"\nexport BINANCE_API_KEY=\"your_testnet_key\"\nexport BINANCE_API_SECRET=\"your_testnet_secret\"\n</code></pre>"},{"location":"contributing/#test-commands","title":"Test Commands","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=binance_mcp_server\n\n# Run specific tests\npytest tests/test_tools/test_new_feature.py\n</code></pre>"},{"location":"contributing/#documentation-guidelines","title":"\ud83d\udcdd Documentation Guidelines","text":""},{"location":"contributing/#documentation-requirements","title":"Documentation Requirements","text":"<ul> <li>API documentation for any new tools</li> <li>Code comments for complex logic</li> <li>Type hints for all function parameters and returns</li> <li>Docstrings following Google style</li> <li>Usage examples for new features</li> </ul>"},{"location":"contributing/#documentation-style","title":"Documentation Style","text":"<p>Follow our established patterns:</p> <ul> <li>Use clear, concise language</li> <li>Include practical examples</li> <li>Provide error handling guidance</li> <li>Add security considerations where relevant</li> </ul>"},{"location":"contributing/#types-of-contributions","title":"\ud83c\udfaf Types of Contributions","text":""},{"location":"contributing/#bug-reports","title":"\ud83d\udc1b Bug Reports","text":"<p>When reporting bugs, please include:</p> <ul> <li>Environment details (Python version, OS, package version)</li> <li>Steps to reproduce the issue</li> <li>Expected vs actual behavior</li> <li>Error messages and stack traces</li> <li>Minimal code example if possible</li> </ul>"},{"location":"contributing/#feature-requests","title":"\u2728 Feature Requests","text":"<p>For new features:</p> <ul> <li>Describe the use case and business value</li> <li>Provide examples of how it would be used</li> <li>Consider backward compatibility</li> <li>Check existing issues to avoid duplicates</li> </ul>"},{"location":"contributing/#documentation-improvements","title":"\ud83d\udcda Documentation Improvements","text":"<p>Documentation contributions are always welcome:</p> <ul> <li>Fix typos and grammatical errors</li> <li>Improve clarity of existing content</li> <li>Add missing examples</li> <li>Update outdated information</li> </ul>"},{"location":"contributing/#code-contributions","title":"\ud83d\udd27 Code Contributions","text":""},{"location":"contributing/#new-tools","title":"New Tools","text":"<p>When adding new Binance API tools:</p> <ol> <li>Create tool module in <code>binance_mcp_server/tools/</code></li> <li>Follow existing patterns for error handling and response format</li> <li>Add comprehensive tests</li> <li>Document the tool in API reference</li> <li>Register tool in main server</li> </ol>"},{"location":"contributing/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Include tests that reproduce the bug</li> <li>Fix only the specific issue</li> <li>Maintain backward compatibility</li> <li>Update documentation if behavior changes</li> </ul>"},{"location":"contributing/#code-standards","title":"\ud83d\udccf Code Standards","text":""},{"location":"contributing/#python-code-style","title":"Python Code Style","text":"<ul> <li>Black for code formatting</li> <li>isort for import sorting</li> <li>mypy for type checking</li> <li>pytest for testing</li> <li>Google-style docstrings</li> </ul>"},{"location":"contributing/#code-quality","title":"Code Quality","text":"<ul> <li>Type hints for all function signatures</li> <li>Error handling for all external API calls</li> <li>Rate limiting consideration for new API endpoints</li> <li>Logging for debugging and monitoring</li> <li>Security best practices for credential handling</li> </ul>"},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<p>Use conventional commit format:</p> <pre><code>feat(tools): add get_margin_info tool\nfix(config): handle missing environment variables\ndocs(api): update examples for get_balance\ntest(orders): add integration tests for create_order\n</code></pre>"},{"location":"contributing/#release-process","title":"\ud83d\ude80 Release Process","text":""},{"location":"contributing/#version-management","title":"Version Management","text":"<p>We follow Semantic Versioning (SemVer):</p> <ul> <li>MAJOR: Breaking changes</li> <li>MINOR: New features, backward compatible</li> <li>PATCH: Bug fixes, backward compatible</li> </ul>"},{"location":"contributing/#release-checklist","title":"Release Checklist","text":"<ul> <li> All tests pass on multiple Python versions</li> <li> Documentation is up to date</li> <li> Version number updated in <code>pyproject.toml</code></li> <li> Changelog updated with release notes</li> <li> Security review completed</li> <li> Performance testing on testnet</li> </ul>"},{"location":"contributing/#security-guidelines","title":"\ud83d\udd12 Security Guidelines","text":""},{"location":"contributing/#api-key-security","title":"API Key Security","text":"<ul> <li>Never commit API keys or secrets</li> <li>Use environment variables for all credentials</li> <li>Test with testnet credentials only</li> <li>Document security requirements for new features</li> </ul>"},{"location":"contributing/#code-security","title":"Code Security","text":"<ul> <li>Validate all inputs from external sources</li> <li>Sanitize user data before API calls</li> <li>Handle rate limiting properly</li> <li>Implement proper error handling without exposing sensitive information</li> </ul>"},{"location":"contributing/#getting-help","title":"\ud83d\udcde Getting Help","text":""},{"location":"contributing/#community-support","title":"Community Support","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>GitHub Discussions: General questions and community support</li> <li>Documentation: Comprehensive guides and API reference</li> </ul>"},{"location":"contributing/#maintainer-contact","title":"Maintainer Contact","text":"<p>For security issues or private discussions: - Email: dossehdosseh14@gmail.com</p>"},{"location":"contributing/#code-of-conduct","title":"\ud83d\udcdc Code of Conduct","text":""},{"location":"contributing/#our-pledge","title":"Our Pledge","text":"<p>We pledge to make participation in this project a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"contributing/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul>"},{"location":"contributing/#enforcement","title":"Enforcement","text":"<p>Instances of unacceptable behavior may be reported by contacting the project team at dossehdosseh14@gmail.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>Thank you for contributing to the Binance MCP Server! Your efforts help make cryptocurrency trading more accessible through AI agents and the Model Context Protocol.</p>"},{"location":"development/","title":"Development Guide","text":"<p>\ud83c\udfaf For End Users: If you just want to use the Binance MCP Server, install it from PyPI with <code>pip install binance-mcp-server</code> and follow the Setup Guide.</p> <p>\ud83d\udc68\u200d\ud83d\udcbb For Developers: This guide is for contributors who want to modify the source code, add features, or contribute to the project.</p> <p>This guide covers development, testing, and contribution workflows for the Binance MCP Server.</p>"},{"location":"development/#development-setup","title":"Development Setup","text":""},{"location":"development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+ - Required for modern typing and FastMCP support</li> <li>Git - For version control</li> <li>uv (recommended) or pip for package management</li> </ul>"},{"location":"development/#local-development-setup","title":"Local Development Setup","text":""},{"location":"development/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/AnalyticAce/BinanceMCPServer.git\ncd BinanceMCPServer\n</code></pre>"},{"location":"development/#2-set-up-virtual-environment","title":"2. Set Up Virtual Environment","text":"<pre><code># Using uv (recommended)\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Using pip\npython -m venv venv\nsource venv/bin/activate   # On Windows: venv\\Scripts\\activate\n</code></pre>"},{"location":"development/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code># Development installation\npip install -e .\n\n# Install development dependencies\npip install pytest pytest-cov black isort mypy pre-commit\n</code></pre>"},{"location":"development/#4-set-up-pre-commit-hooks","title":"4. Set Up Pre-commit Hooks","text":"<pre><code>pre-commit install\n</code></pre>"},{"location":"development/#5-configure-environment","title":"5. Configure Environment","text":"<pre><code># Copy example environment file\ncp .env.example .env\n\n# Edit .env with your credentials\nexport BINANCE_API_KEY=\"your_testnet_key\"\nexport BINANCE_API_SECRET=\"your_testnet_secret\"\nexport BINANCE_TESTNET=\"true\"\n</code></pre>"},{"location":"development/#project-structure","title":"Project Structure","text":"<pre><code>BinanceMCPServer/\n\u251c\u2500\u2500 binance_mcp_server/          # Main package\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 server.py                # FastMCP server with tool registration\n\u2502   \u251c\u2500\u2500 config.py                # Configuration management\n\u2502   \u251c\u2500\u2500 utils.py                 # Shared utilities and rate limiting\n\u2502   \u251c\u2500\u2500 cli.py                   # Command-line interface\n\u2502   \u2514\u2500\u2500 tools/                   # Individual tool implementations\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 get_ticker_price.py  # Price data tool\n\u2502       \u251c\u2500\u2500 get_balance.py       # Account balance tool\n\u2502       \u251c\u2500\u2500 create_order.py      # Order creation tool\n\u2502       \u2514\u2500\u2500 ...                  # Other tools\n\u251c\u2500\u2500 tests/                       # Test suite\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 conftest.py             # Pytest configuration\n\u2502   \u251c\u2500\u2500 test_server.py          # Server tests\n\u2502   \u2514\u2500\u2500 test_tools/             # Tool-specific tests\n\u251c\u2500\u2500 docs/                       # Documentation\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 api-reference.md\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 scripts/                    # Utility scripts\n\u251c\u2500\u2500 pyproject.toml             # Package configuration\n\u251c\u2500\u2500 mkdocs.yml                 # Documentation configuration\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"development/#development-workflow","title":"Development Workflow","text":""},{"location":"development/#code-style-and-formatting","title":"Code Style and Formatting","text":"<p>The project uses standardized code formatting:</p>"},{"location":"development/#black-code-formatting","title":"Black (Code Formatting)","text":"<pre><code># Format all Python files\nblack binance_mcp_server/ tests/\n\n# Check formatting without changes\nblack --check binance_mcp_server/ tests/\n</code></pre>"},{"location":"development/#isort-import-sorting","title":"isort (Import Sorting)","text":"<pre><code># Sort imports\nisort binance_mcp_server/ tests/\n\n# Check import sorting\nisort --check-only binance_mcp_server/ tests/\n</code></pre>"},{"location":"development/#type-checking-with-mypy","title":"Type Checking with mypy","text":"<pre><code># Run type checking\nmypy binance_mcp_server/\n</code></pre>"},{"location":"development/#testing","title":"Testing","text":""},{"location":"development/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=binance_mcp_server --cov-report=html\n\n# Run specific test file\npytest tests/test_tools/test_get_ticker_price.py\n\n# Run with verbose output\npytest -v\n</code></pre>"},{"location":"development/#test-categories","title":"Test Categories","text":"<p>Unit Tests: Test individual functions and modules <pre><code>pytest tests/test_tools/\n</code></pre></p> <p>Integration Tests: Test tool integration with mocked Binance API <pre><code>pytest tests/test_server.py\n</code></pre></p> <p>End-to-End Tests: Test complete workflows (requires testnet API keys) <pre><code>pytest tests/test_e2e.py --run-e2e\n</code></pre></p>"},{"location":"development/#adding-new-tools","title":"Adding New Tools","text":""},{"location":"development/#step-1-create-tool-module","title":"Step 1: Create Tool Module","text":"<p>Create a new file in <code>binance_mcp_server/tools/</code>:</p> <pre><code># binance_mcp_server/tools/get_new_feature.py\nimport logging\nfrom typing import Dict, Any\nfrom binance.exceptions import BinanceAPIException, BinanceRequestException\nfrom binance_mcp_server.utils import (\n    get_binance_client,\n    create_error_response,\n    create_success_response,\n    rate_limited,\n    binance_rate_limiter,\n)\n\nlogger = logging.getLogger(__name__)\n\n@rate_limited(binance_rate_limiter)\ndef get_new_feature(param1: str, param2: int = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    Tool description.\n\n    Args:\n        param1: Description of parameter 1\n        param2: Optional description of parameter 2\n\n    Returns:\n        Dict containing success status and data\n\n    Examples:\n        result = get_new_feature(\"value1\", 123)\n        if result[\"success\"]:\n            data = result[\"data\"]\n    \"\"\"\n    logger.info(f\"Tool called: get_new_feature with param1={param1}, param2={param2}\")\n\n    try:\n        client = get_binance_client()\n\n        # Implement tool logic\n        api_result = client.some_api_method(param1, param2)\n\n        # Process and format result\n        processed_data = {\n            \"processed_field\": api_result[\"field\"],\n            \"calculated_value\": api_result[\"value\"] * 2\n        }\n\n        logger.info(\"Successfully executed get_new_feature\")\n\n        return create_success_response(\n            data=processed_data,\n            metadata={\n                \"source\": \"binance_api\",\n                \"endpoint\": \"new_feature\"\n            }\n        )\n\n    except (BinanceAPIException, BinanceRequestException) as e:\n        logger.error(f\"Error in get_new_feature: {str(e)}\")\n        return create_error_response(\"binance_api_error\", f\"Error: {str(e)}\")\n\n    except Exception as e:\n        logger.error(f\"Unexpected error in get_new_feature: {str(e)}\")\n        return create_error_response(\"tool_error\", f\"Tool execution failed: {str(e)}\")\n</code></pre>"},{"location":"development/#step-2-register-tool-in-server","title":"Step 2: Register Tool in Server","text":"<p>Add the tool to <code>binance_mcp_server/server.py</code>:</p> <pre><code>@mcp.tool()\ndef get_new_feature(param1: str, param2: Optional[int] = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    Tool description for MCP clients.\n\n    Args:\n        param1: Description of parameter 1\n        param2: Optional description of parameter 2\n\n    Returns:\n        Dictionary containing success status and data\n    \"\"\"\n    logger.info(f\"Tool called: get_new_feature with param1={param1}, param2={param2}\")\n\n    try:\n        from binance_mcp_server.tools.get_new_feature import get_new_feature as _get_new_feature\n        result = _get_new_feature(param1, param2)\n\n        if result.get(\"success\"):\n            logger.info(\"Successfully executed get_new_feature\")\n        else:\n            logger.warning(f\"Failed to execute get_new_feature: {result.get('error', {}).get('message')}\")\n\n        return result\n\n    except Exception as e:\n        logger.error(f\"Unexpected error in get_new_feature tool: {str(e)}\")\n        return {\n            \"success\": False,\n            \"error\": {\n                \"type\": \"tool_error\",\n                \"message\": f\"Tool execution failed: {str(e)}\"\n            }\n        }\n</code></pre>"},{"location":"development/#step-3-create-tests","title":"Step 3: Create Tests","text":"<p>Create test file in <code>tests/test_tools/</code>:</p> <pre><code># tests/test_tools/test_get_new_feature.py\nimport pytest\nfrom unittest.mock import Mock, patch\nfrom binance_mcp_server.tools.get_new_feature import get_new_feature\n\nclass TestGetNewFeature:\n\n    @patch('binance_mcp_server.tools.get_new_feature.get_binance_client')\n    def test_get_new_feature_success(self, mock_get_client):\n        # Arrange\n        mock_client = Mock()\n        mock_client.some_api_method.return_value = {\n            \"field\": \"test_value\",\n            \"value\": 50\n        }\n        mock_get_client.return_value = mock_client\n\n        # Act\n        result = get_new_feature(\"test_param\", 123)\n\n        # Assert\n        assert result[\"success\"] is True\n        assert result[\"data\"][\"processed_field\"] == \"test_value\"\n        assert result[\"data\"][\"calculated_value\"] == 100\n        mock_client.some_api_method.assert_called_once_with(\"test_param\", 123)\n\n    @patch('binance_mcp_server.tools.get_new_feature.get_binance_client')\n    def test_get_new_feature_api_error(self, mock_get_client):\n        # Arrange\n        from binance.exceptions import BinanceAPIException\n        mock_client = Mock()\n        mock_client.some_api_method.side_effect = BinanceAPIException(\"API Error\")\n        mock_get_client.return_value = mock_client\n\n        # Act\n        result = get_new_feature(\"test_param\")\n\n        # Assert\n        assert result[\"success\"] is False\n        assert result[\"error\"][\"type\"] == \"binance_api_error\"\n        assert \"API Error\" in result[\"error\"][\"message\"]\n</code></pre>"},{"location":"development/#step-4-update-documentation","title":"Step 4: Update Documentation","text":"<p>Add tool documentation to <code>docs/api-reference.md</code>:</p> <pre><code>### get_new_feature\n\nDescription of the new tool.\n\n**Parameters:**\n- `param1` (string, required): Description\n- `param2` (integer, optional): Description\n\n**Example:**\n```json\n{\n  \"tool\": \"get_new_feature\",\n  \"arguments\": {\n    \"param1\": \"value\",\n    \"param2\": 123\n  }\n}\n</code></pre> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"processed_field\": \"value\",\n    \"calculated_value\": 246\n  }\n}\n</code></pre> <pre><code>### Running the Development Server\n\n#### STDIO Mode (for MCP testing)\n```bash\n# For development - when working from source\npython -m binance_mcp_server.cli\n\n# For testing installed package\nbinance-mcp-server\n</code></pre></p>"},{"location":"development/#http-mode-for-development","title":"HTTP Mode (for development)","text":"<pre><code># From source\npython -m binance_mcp_server.cli --transport streamable-http --port 8000 --log-level DEBUG\n\n# From installed package  \nbinance-mcp-server --transport streamable-http --port 8000 --log-level DEBUG\n</code></pre>"},{"location":"development/#testing-http-endpoints","title":"Testing HTTP Endpoints","text":"<pre><code>curl -X POST http://localhost:8000/call \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"tool\": \"get_ticker_price\", \"arguments\": {\"symbol\": \"BTCUSDT\"}}'\n</code></pre>"},{"location":"development/#debugging","title":"Debugging","text":""},{"location":"development/#logging-configuration","title":"Logging Configuration","text":"<p>Enable debug logging for detailed output:</p> <pre><code>python -m binance_mcp_server.server --log-level DEBUG\n</code></pre>"},{"location":"development/#common-debug-scenarios","title":"Common Debug Scenarios","text":""},{"location":"development/#api-connection-issues","title":"API Connection Issues","text":"<pre><code># Test client connection\nfrom binance_mcp_server.utils import get_binance_client\n\ntry:\n    client = get_binance_client()\n    result = client.ping()\n    print(\"Connection successful:\", result)\nexcept Exception as e:\n    print(\"Connection failed:\", e)\n</code></pre>"},{"location":"development/#rate-limiting","title":"Rate Limiting","text":"<pre><code># Check rate limiter status\nfrom binance_mcp_server.utils import binance_rate_limiter\n\nprint(f\"Current calls: {len(binance_rate_limiter.calls)}\")\nprint(f\"Can proceed: {binance_rate_limiter.can_proceed()}\")\n</code></pre>"},{"location":"development/#configuration-validation","title":"Configuration Validation","text":"<pre><code># Validate configuration\nfrom binance_mcp_server.config import BinanceConfig\n\nconfig = BinanceConfig()\nprint(f\"Valid: {config.is_valid()}\")\nprint(f\"Errors: {config.get_validation_errors()}\")\nprint(f\"Testnet: {config.testnet}\")\n</code></pre>"},{"location":"development/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"development/#submitting-pull-requests","title":"Submitting Pull Requests","text":"<ol> <li>Fork the repository on GitHub</li> <li>Create a feature branch from <code>main</code></li> <li>Make your changes following the development workflow</li> <li>Add tests for new functionality</li> <li>Update documentation as needed</li> <li>Run the full test suite and ensure all tests pass</li> <li>Submit a pull request with a clear description</li> </ol>"},{"location":"development/#code-review-process","title":"Code Review Process","text":"<ol> <li>Automated checks must pass (tests, linting, type checking)</li> <li>Code review by maintainers</li> <li>Documentation review for completeness and accuracy</li> <li>Testing on testnet environment</li> <li>Merge after approval</li> </ol>"},{"location":"development/#issue-reporting","title":"Issue Reporting","text":"<p>When reporting issues, include:</p> <ul> <li>Environment details (Python version, OS, package version)</li> <li>Configuration (testnet vs production, anonymized)</li> <li>Steps to reproduce the issue</li> <li>Expected vs actual behavior</li> <li>Error messages and stack traces</li> <li>Minimal code example demonstrating the issue</li> </ul>"},{"location":"development/#feature-requests","title":"Feature Requests","text":"<p>For new features:</p> <ul> <li>Describe the use case and business value</li> <li>Provide examples of how the feature would be used</li> <li>Consider implementation complexity and maintenance burden</li> <li>Check existing issues to avoid duplicates</li> </ul>"},{"location":"development/#release-process","title":"Release Process","text":""},{"location":"development/#version-management","title":"Version Management","text":"<p>The project uses semantic versioning (SemVer):</p> <ul> <li>MAJOR: Breaking changes</li> <li>MINOR: New features, backward compatible</li> <li>PATCH: Bug fixes, backward compatible</li> </ul>"},{"location":"development/#creating-a-release","title":"Creating a Release","text":"<ol> <li>Update version in <code>pyproject.toml</code></li> <li>Update CHANGELOG.md with release notes</li> <li>Run full test suite on testnet and production</li> <li>Create git tag with version number</li> <li>Build and publish to PyPI</li> <li>Deploy documentation to GitHub Pages</li> </ol>"},{"location":"development/#testing-checklist","title":"Testing Checklist","text":"<p>Before release:</p> <ul> <li> All tests pass locally</li> <li> All tests pass in CI/CD</li> <li> Documentation builds successfully</li> <li> Manual testing on testnet</li> <li> Manual testing on production (read-only operations)</li> <li> Performance testing under load</li> <li> Security review of changes</li> </ul>"},{"location":"development/#troubleshooting-development-issues","title":"Troubleshooting Development Issues","text":""},{"location":"development/#common-development-problems","title":"Common Development Problems","text":""},{"location":"development/#1-import-errors","title":"1. Import Errors","text":"<pre><code># Ensure package is installed in development mode\npip install -e .\n</code></pre>"},{"location":"development/#2-test-failures","title":"2. Test Failures","text":"<pre><code># Run tests with verbose output\npytest -v -s\n\n# Run specific failing test\npytest tests/test_tools/test_specific.py::test_method -v\n</code></pre>"},{"location":"development/#3-type-checking-errors","title":"3. Type Checking Errors","text":"<pre><code># Run mypy with verbose output\nmypy binance_mcp_server/ --show-error-codes\n</code></pre>"},{"location":"development/#4-api-rate-limiting-during-testing","title":"4. API Rate Limiting During Testing","text":"<pre><code># Use longer delays between test API calls\npytest --timeout=60 -s\n</code></pre>"},{"location":"development/#development-tools","title":"Development Tools","text":""},{"location":"development/#useful-scripts","title":"Useful Scripts","text":"<pre><code># Format and check code\nscripts/format.sh\n\n# Run all quality checks\nscripts/check.sh\n\n# Build documentation\nscripts/build-docs.sh\n</code></pre>"},{"location":"development/#ide-configuration","title":"IDE Configuration","text":"<p>VS Code - Recommended extensions: - Python - Pylance - Black Formatter - isort - Better TOML</p> <p>PyCharm - Recommended settings: - Enable type checking - Configure Black as external tool - Set up pytest as test runner</p> <p>This development guide provides everything needed to contribute effectively to the Binance MCP Server project.</p>"},{"location":"examples/","title":"Usage Examples","text":"<p>This guide provides practical examples of using the Binance MCP Server tools in various scenarios.</p>"},{"location":"examples/#getting-started-examples","title":"Getting Started Examples","text":""},{"location":"examples/#basic-market-data","title":"Basic Market Data","text":""},{"location":"examples/#get-current-bitcoin-price","title":"Get Current Bitcoin Price","text":"<pre><code>{\n  \"tool\": \"get_ticker_price\",\n  \"arguments\": {\n    \"symbol\": \"BTCUSDT\"\n  }\n}\n</code></pre> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"symbol\": \"BTCUSDT\",\n    \"price\": 42350.50\n  },\n  \"timestamp\": 1704067200000\n}\n</code></pre></p>"},{"location":"examples/#get-24-hour-market-statistics","title":"Get 24-Hour Market Statistics","text":"<pre><code>{\n  \"tool\": \"get_ticker\",\n  \"arguments\": {\n    \"symbol\": \"ETHUSDT\"\n  }\n}\n</code></pre> <p>Use case: Track daily performance, price changes, and trading volume.</p>"},{"location":"examples/#trading-examples","title":"Trading Examples","text":""},{"location":"examples/#placing-orders","title":"Placing Orders","text":""},{"location":"examples/#market-buy-order","title":"Market Buy Order","text":"<pre><code>{\n  \"tool\": \"create_order\",\n  \"arguments\": {\n    \"symbol\": \"BTCUSDT\",\n    \"side\": \"BUY\",\n    \"order_type\": \"MARKET\",\n    \"quantity\": 0.001\n  }\n}\n</code></pre> <p>Use case: Buy Bitcoin immediately at current market price.</p>"},{"location":"examples/#limit-sell-order","title":"Limit Sell Order","text":"<pre><code>{\n  \"tool\": \"create_order\",\n  \"arguments\": {\n    \"symbol\": \"ETHUSDT\",\n    \"side\": \"SELL\",\n    \"order_type\": \"LIMIT\",\n    \"quantity\": 0.5,\n    \"price\": 2500.00\n  }\n}\n</code></pre> <p>Use case: Sell Ethereum when price reaches $2,500.</p>"},{"location":"examples/#order-management","title":"Order Management","text":""},{"location":"examples/#check-order-history","title":"Check Order History","text":"<pre><code>{\n  \"tool\": \"get_orders\",\n  \"arguments\": {\n    \"symbol\": \"BTCUSDT\",\n    \"start_time\": 1704000000000,\n    \"end_time\": 1704086400000\n  }\n}\n</code></pre> <p>Use case: Review all Bitcoin trades from the last 24 hours.</p>"},{"location":"examples/#portfolio-management-examples","title":"Portfolio Management Examples","text":""},{"location":"examples/#account-monitoring","title":"Account Monitoring","text":""},{"location":"examples/#check-all-balances","title":"Check All Balances","text":"<pre><code>{\n  \"tool\": \"get_balance\",\n  \"arguments\": {}\n}\n</code></pre> <p>Example Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"BTC\": {\"free\": 0.12345678, \"locked\": 0.0},\n    \"ETH\": {\"free\": 2.5, \"locked\": 0.5},\n    \"USDT\": {\"free\": 1234.56, \"locked\": 100.0}\n  }\n}\n</code></pre></p> <p>Use case: Monitor portfolio composition and available funds.</p>"},{"location":"examples/#get-account-snapshot","title":"Get Account Snapshot","text":"<pre><code>{\n  \"tool\": \"get_account_snapshot\",\n  \"arguments\": {\n    \"account_type\": \"SPOT\"\n  }\n}\n</code></pre> <p>Use case: Generate portfolio reports and track account performance over time.</p>"},{"location":"examples/#futures-trading","title":"Futures Trading","text":""},{"location":"examples/#check-positions","title":"Check Positions","text":"<pre><code>{\n  \"tool\": \"get_position_info\",\n  \"arguments\": {}\n}\n</code></pre> <p>Use case: Monitor open futures positions, leverage, and liquidation prices.</p>"},{"location":"examples/#check-pl","title":"Check P&amp;L","text":"<pre><code>{\n  \"tool\": \"get_pnl\",\n  \"arguments\": {}\n}\n</code></pre> <p>Use case: Track realized and unrealized profits/losses.</p>"},{"location":"examples/#market-analysis-examples","title":"Market Analysis Examples","text":""},{"location":"examples/#order-book-analysis","title":"Order Book Analysis","text":""},{"location":"examples/#get-market-depth","title":"Get Market Depth","text":"<pre><code>{\n  \"tool\": \"get_order_book\",\n  \"arguments\": {\n    \"symbol\": \"BTCUSDT\",\n    \"limit\": 20\n  }\n}\n</code></pre> <p>Example Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"symbol\": \"BTCUSDT\",\n    \"bids\": [\n      [\"42350.00\", \"1.5\"],\n      [\"42349.50\", \"2.1\"],\n      [\"42349.00\", \"0.8\"]\n    ],\n    \"asks\": [\n      [\"42350.50\", \"2.1\"],\n      [\"42351.00\", \"1.8\"],\n      [\"42351.50\", \"3.2\"]\n    ]\n  }\n}\n</code></pre></p> <p>Use case: Analyze market liquidity and find optimal entry/exit points.</p>"},{"location":"examples/#trading-pair-discovery","title":"Trading Pair Discovery","text":""},{"location":"examples/#list-available-assets","title":"List Available Assets","text":"<pre><code>{\n  \"tool\": \"get_available_assets\",\n  \"arguments\": {}\n}\n</code></pre> <p>Use case: Discover new trading pairs and verify symbol formats.</p>"},{"location":"examples/#transaction-history-examples","title":"Transaction History Examples","text":""},{"location":"examples/#deposit-tracking","title":"Deposit Tracking","text":""},{"location":"examples/#check-bitcoin-deposits","title":"Check Bitcoin Deposits","text":"<pre><code>{\n  \"tool\": \"get_deposit_history\",\n  \"arguments\": {\n    \"coin\": \"BTC\"\n  }\n}\n</code></pre> <p>Use case: Verify incoming Bitcoin transfers and deposit confirmations.</p>"},{"location":"examples/#get-deposit-address","title":"Get Deposit Address","text":"<pre><code>{\n  \"tool\": \"get_deposit_address\",\n  \"arguments\": {\n    \"coin\": \"ETH\"\n  }\n}\n</code></pre> <p>Use case: Generate deposit address for receiving Ethereum.</p>"},{"location":"examples/#withdrawal-monitoring","title":"Withdrawal Monitoring","text":""},{"location":"examples/#check-withdrawal-status","title":"Check Withdrawal Status","text":"<pre><code>{\n  \"tool\": \"get_withdraw_history\",\n  \"arguments\": {\n    \"coin\": \"USDT\"\n  }\n}\n</code></pre> <p>Use case: Track outgoing USDT transfers and withdrawal status.</p>"},{"location":"examples/#fee-analysis-examples","title":"Fee Analysis Examples","text":""},{"location":"examples/#trading-cost-calculation","title":"Trading Cost Calculation","text":""},{"location":"examples/#get-trading-fees","title":"Get Trading Fees","text":"<pre><code>{\n  \"tool\": \"get_fee_info\",\n  \"arguments\": {\n    \"symbol\": \"BTCUSDT\"\n  }\n}\n</code></pre> <p>Example Response: <pre><code>{\n  \"success\": true,\n  \"data\": [\n    {\n      \"symbol\": \"BTCUSDT\",\n      \"makerCommission\": \"0.001\",\n      \"takerCommission\": \"0.001\"\n    }\n  ]\n}\n</code></pre></p> <p>Use case: Calculate trading costs and optimize order types (maker vs taker).</p>"},{"location":"examples/#advanced-scenarios","title":"Advanced Scenarios","text":""},{"location":"examples/#automated-trading-bot","title":"Automated Trading Bot","text":"<p>Here's an example workflow for a simple trading bot:</p>"},{"location":"examples/#1-check-market-conditions","title":"1. Check Market Conditions","text":"<pre><code>{\n  \"tool\": \"get_ticker\",\n  \"arguments\": {\"symbol\": \"BTCUSDT\"}\n}\n</code></pre>"},{"location":"examples/#2-analyze-order-book","title":"2. Analyze Order Book","text":"<pre><code>{\n  \"tool\": \"get_order_book\", \n  \"arguments\": {\"symbol\": \"BTCUSDT\", \"limit\": 10}\n}\n</code></pre>"},{"location":"examples/#3-check-available-balance","title":"3. Check Available Balance","text":"<pre><code>{\n  \"tool\": \"get_balance\",\n  \"arguments\": {}\n}\n</code></pre>"},{"location":"examples/#4-place-strategic-order","title":"4. Place Strategic Order","text":"<pre><code>{\n  \"tool\": \"create_order\",\n  \"arguments\": {\n    \"symbol\": \"BTCUSDT\",\n    \"side\": \"BUY\",\n    \"order_type\": \"LIMIT\",\n    \"quantity\": 0.001,\n    \"price\": 42000.0\n  }\n}\n</code></pre>"},{"location":"examples/#5-monitor-order-status","title":"5. Monitor Order Status","text":"<pre><code>{\n  \"tool\": \"get_orders\",\n  \"arguments\": {\"symbol\": \"BTCUSDT\"}\n}\n</code></pre>"},{"location":"examples/#portfolio-rebalancing","title":"Portfolio Rebalancing","text":""},{"location":"examples/#1-get-current-portfolio","title":"1. Get Current Portfolio","text":"<pre><code>{\n  \"tool\": \"get_balance\",\n  \"arguments\": {}\n}\n</code></pre>"},{"location":"examples/#2-check-current-prices","title":"2. Check Current Prices","text":"<pre><code>{\n  \"tool\": \"get_ticker_price\",\n  \"arguments\": {\"symbol\": \"BTCUSDT\"}\n}\n</code></pre> <pre><code>{\n  \"tool\": \"get_ticker_price\", \n  \"arguments\": {\"symbol\": \"ETHUSDT\"}\n}\n</code></pre>"},{"location":"examples/#3-calculate-rebalancing-trades","title":"3. Calculate Rebalancing Trades","text":"<p>Based on portfolio percentages and current values.</p>"},{"location":"examples/#4-execute-rebalancing-orders","title":"4. Execute Rebalancing Orders","text":"<pre><code>{\n  \"tool\": \"create_order\",\n  \"arguments\": {\n    \"symbol\": \"BTCUSDT\",\n    \"side\": \"SELL\",\n    \"order_type\": \"MARKET\",\n    \"quantity\": 0.01\n  }\n}\n</code></pre>"},{"location":"examples/#risk-management","title":"Risk Management","text":""},{"location":"examples/#1-monitor-futures-positions","title":"1. Monitor Futures Positions","text":"<pre><code>{\n  \"tool\": \"get_position_info\",\n  \"arguments\": {}\n}\n</code></pre>"},{"location":"examples/#2-check-liquidation-history","title":"2. Check Liquidation History","text":"<pre><code>{\n  \"tool\": \"get_liquidation_history\",\n  \"arguments\": {}\n}\n</code></pre>"},{"location":"examples/#3-set-stop-loss-orders","title":"3. Set Stop-Loss Orders","text":"<pre><code>{\n  \"tool\": \"create_order\",\n  \"arguments\": {\n    \"symbol\": \"BTCUSDT\",\n    \"side\": \"SELL\",\n    \"order_type\": \"STOP_LOSS_LIMIT\",\n    \"quantity\": 0.001,\n    \"price\": 40000.0\n  }\n}\n</code></pre>"},{"location":"examples/#error-handling-examples","title":"Error Handling Examples","text":""},{"location":"examples/#handling-api-errors","title":"Handling API Errors","text":"<pre><code># Example error response\n{\n  \"success\": false,\n  \"error\": {\n    \"type\": \"binance_api_error\",\n    \"message\": \"Insufficient balance\",\n    \"timestamp\": 1704067200000\n  }\n}\n</code></pre> <p>Common errors and solutions:</p> <ol> <li>Insufficient Balance</li> <li>Check balance before placing orders</li> <li> <p>Adjust order quantity</p> </li> <li> <p>Invalid Symbol</p> </li> <li>Verify symbol format (e.g., \"BTCUSDT\" not \"BTC/USDT\")</li> <li> <p>Check available assets list</p> </li> <li> <p>Rate Limit Exceeded</p> </li> <li>Wait before retrying</li> <li>Implement exponential backoff</li> </ol>"},{"location":"examples/#validation-examples","title":"Validation Examples","text":""},{"location":"examples/#symbol-validation","title":"Symbol Validation","text":"<pre><code>// \u2705 Correct\n{\"symbol\": \"BTCUSDT\"}\n\n// \u274c Incorrect \n{\"symbol\": \"BTC/USDT\"}\n{\"symbol\": \"btcusdt\"}\n</code></pre>"},{"location":"examples/#order-side-validation","title":"Order Side Validation","text":"<pre><code>// \u2705 Correct\n{\"side\": \"BUY\"}\n{\"side\": \"SELL\"}\n\n// \u274c Incorrect\n{\"side\": \"buy\"}\n{\"side\": \"Buy\"}\n</code></pre>"},{"location":"examples/#integration-examples","title":"Integration Examples","text":""},{"location":"examples/#claude-desktop-integration","title":"Claude Desktop Integration","text":"<p>Add to your Claude Desktop configuration:</p> <pre><code>{\n  \"mcpServers\": {\n    \"binance\": {\n      \"command\": \"binance-mcp-server\",\n      \"args\": [],\n      \"env\": {\n        \"BINANCE_API_KEY\": \"your_key\",\n        \"BINANCE_API_SECRET\": \"your_secret\",\n        \"BINANCE_TESTNET\": \"true\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"examples/#python-integration","title":"Python Integration","text":"<pre><code>import requests\nimport json\n\n# Start server in HTTP mode for testing\n# binance-mcp-server --transport streamable-http\n\ndef call_tool(tool_name, arguments):\n    url = \"http://localhost:8000/call\"\n    payload = {\n        \"tool\": tool_name,\n        \"arguments\": arguments\n    }\n    response = requests.post(url, json=payload)\n    return response.json()\n\n# Get Bitcoin price\nresult = call_tool(\"get_ticker_price\", {\"symbol\": \"BTCUSDT\"})\nif result[\"success\"]:\n    print(f\"BTC Price: ${result['data']['price']}\")\n</code></pre>"},{"location":"examples/#curl-examples","title":"cURL Examples","text":"<pre><code># Get current price\ncurl -X POST http://localhost:8000/call \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"tool\": \"get_ticker_price\", \"arguments\": {\"symbol\": \"BTCUSDT\"}}'\n\n# Check balance\ncurl -X POST http://localhost:8000/call \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"tool\": \"get_balance\", \"arguments\": {}}'\n\n# Place order\ncurl -X POST http://localhost:8000/call \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"tool\": \"create_order\",\n    \"arguments\": {\n      \"symbol\": \"BTCUSDT\",\n      \"side\": \"BUY\", \n      \"order_type\": \"LIMIT\",\n      \"quantity\": 0.001,\n      \"price\": 42000.0\n    }\n  }'\n</code></pre>"},{"location":"examples/#best-practices","title":"Best Practices","text":""},{"location":"examples/#1-always-use-testnet-first","title":"1. Always Use Testnet First","text":"<pre><code>export BINANCE_TESTNET=\"true\"\n</code></pre>"},{"location":"examples/#2-check-success-before-processing","title":"2. Check Success Before Processing","text":"<pre><code>if result[\"success\"]:\n    data = result[\"data\"]\n    # Process data\nelse:\n    error = result[\"error\"]\n    # Handle error\n</code></pre>"},{"location":"examples/#3-implement-retry-logic","title":"3. Implement Retry Logic","text":"<pre><code>import time\n\ndef retry_tool_call(tool_name, arguments, max_retries=3):\n    for attempt in range(max_retries):\n        result = call_tool(tool_name, arguments)\n\n        if result[\"success\"]:\n            return result\n\n        if result[\"error\"][\"type\"] == \"rate_limit_exceeded\":\n            time.sleep(2 ** attempt)  # Exponential backoff\n            continue\n\n        return result  # Non-retryable error\n</code></pre>"},{"location":"examples/#4-validate-inputs","title":"4. Validate Inputs","text":"<pre><code>def validate_symbol(symbol):\n    if not symbol or len(symbol) &lt; 3:\n        raise ValueError(\"Invalid symbol\")\n    return symbol.upper()\n</code></pre>"},{"location":"examples/#5-monitor-rate-limits","title":"5. Monitor Rate Limits","text":"<ul> <li>Don't exceed 1200 requests per minute</li> <li>Implement request queuing for high-frequency applications</li> <li>Use rate limit headers if available</li> </ul> <p>These examples provide a comprehensive foundation for building cryptocurrency trading applications, portfolio management tools, and market analysis systems using the Binance MCP Server.</p>"},{"location":"security/","title":"Security Best Practices","text":"<p>This document outlines the security best practices implemented in the Binance MCP Server to ensure safe and secure operation.</p>"},{"location":"security/#overview","title":"Overview","text":"<p>The Binance MCP Server implements comprehensive security measures following Model Context Protocol best practices and industry standards for financial API interactions.</p>"},{"location":"security/#security-features","title":"Security Features","text":""},{"location":"security/#1-credential-management","title":"1. Credential Management","text":"<p>\u2705 Environment Variable Protection - API credentials are managed exclusively through environment variables - No hardcoded credentials in source code - Credential validation on startup - Protection against common placeholder values</p> <p>\u2705 Secure Configuration <pre><code># Required environment variables\nexport BINANCE_API_KEY=\"your_api_key_here\"\nexport BINANCE_API_SECRET=\"your_api_secret_here\"\nexport BINANCE_TESTNET=\"true\"  # Recommended for development\n</code></pre></p>"},{"location":"security/#2-input-validation-sanitization","title":"2. Input Validation &amp; Sanitization","text":"<p>\u2705 Enhanced Symbol Validation - Alphanumeric character validation - Length constraints (3-20 characters) - Prevention of numeric-only symbols - Special character sanitization</p> <p>\u2705 Numeric Parameter Validation - Positive number validation with bounds checking - Prevention of extremely large values - Type safety enforcement</p> <p>\u2705 Order Parameter Validation - Strict order side validation (BUY/SELL only) - Comprehensive order type validation - Price validation for limit orders</p>"},{"location":"security/#3-error-handling-information-protection","title":"3. Error Handling &amp; Information Protection","text":"<p>\u2705 Sanitized Error Messages - Automatic detection and redaction of sensitive patterns - API key pattern masking - Secret information filtering - Safe error propagation</p> <p>\u2705 Structured Error Responses <pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"type\": \"validation_error\",\n    \"message\": \"Invalid symbol format\",\n    \"timestamp\": 1706123456789\n  }\n}\n</code></pre></p>"},{"location":"security/#4-rate-limiting-abuse-prevention","title":"4. Rate Limiting &amp; Abuse Prevention","text":"<p>\u2705 API Rate Limiting - Binance API rate limits respected (1200 requests/minute) - Built-in rate limiter with sliding window - Graceful rate limit error handling</p> <p>\u2705 Request Validation - Input size limits - Injection pattern detection - Request structure validation</p>"},{"location":"security/#5-audit-logging-monitoring","title":"5. Audit Logging &amp; Monitoring","text":"<p>\u2705 Security Event Logging - Tool invocation tracking - Error event logging - Security warning detection - Request ID generation for tracing</p> <p>\u2705 Sensitive Data Protection - No credential logging - Sanitized log outputs - Secure hash generation for identification</p>"},{"location":"security/#implementation-details","title":"Implementation Details","text":""},{"location":"security/#input-validation-functions","title":"Input Validation Functions","text":"<pre><code># Enhanced symbol validation\ndef validate_symbol(symbol: str) -&gt; str:\n    \"\"\"Validates and sanitizes trading symbols with security checks.\"\"\"\n\n# Positive number validation with bounds\ndef validate_positive_number(value: float, field_name: str, \n                           min_value: float = 0.0, \n                           max_value: Optional[float] = None) -&gt; float:\n    \"\"\"Validates numeric inputs with security bounds.\"\"\"\n\n# Limit parameter validation\ndef validate_limit_parameter(limit: Optional[int], \n                           max_limit: int = 5000) -&gt; Optional[int]:\n    \"\"\"Validates API limit parameters.\"\"\"\n</code></pre>"},{"location":"security/#error-sanitization","title":"Error Sanitization","text":"<pre><code># Automatic sensitive data redaction\ndef _sanitize_error_message(message: str) -&gt; str:\n    \"\"\"Removes API keys, secrets, and other sensitive patterns.\"\"\"\n\ndef _sanitize_error_details(details: Dict) -&gt; Dict:\n    \"\"\"Sanitizes error detail objects.\"\"\"\n</code></pre>"},{"location":"security/#security-configuration","title":"Security Configuration","text":"<pre><code>class SecurityConfig:\n    \"\"\"Centralized security configuration management.\"\"\"\n\n    def __init__(self):\n        self.rate_limit_enabled = True\n        self.max_requests_per_minute = 60\n        self.enable_input_validation = True\n        self.log_security_events = True\n</code></pre>"},{"location":"security/#configuration-options","title":"Configuration Options","text":""},{"location":"security/#environment-variables","title":"Environment Variables","text":"Variable Description Default Security Impact <code>BINANCE_API_KEY</code> Binance API key Required \u26a0\ufe0f Critical <code>BINANCE_API_SECRET</code> Binance API secret Required \u26a0\ufe0f Critical <code>BINANCE_TESTNET</code> Use testnet environment <code>false</code> \ud83d\udee1\ufe0f Recommended for dev <code>MCP_RATE_LIMIT_ENABLED</code> Enable rate limiting <code>true</code> \ud83d\udee1\ufe0f Security feature <code>MCP_MAX_REQUESTS_PER_MINUTE</code> Rate limit threshold <code>60</code> \ud83d\udee1\ufe0f Abuse prevention <code>MCP_INPUT_VALIDATION</code> Enable input validation <code>true</code> \ud83d\udee1\ufe0f Security feature <code>MCP_LOG_SECURITY</code> Enable security logging <code>true</code> \ud83d\udcca Monitoring"},{"location":"security/#security-checklist","title":"Security Checklist","text":""},{"location":"security/#development-environment","title":"Development Environment","text":"<ul> <li> Use testnet for all development and testing</li> <li> Never commit API credentials to version control</li> <li> Use <code>.env</code> files for local development (git-ignored)</li> <li> Validate all environment variables on startup</li> <li> Enable comprehensive logging for debugging</li> </ul>"},{"location":"security/#production-environment","title":"Production Environment","text":"<ul> <li> Use production API credentials with minimal required permissions</li> <li> Enable all security features (rate limiting, input validation)</li> <li> Monitor security audit logs regularly</li> <li> Implement proper credential rotation policies</li> <li> Use secure environment variable management</li> <li> Enable network security (firewalls, VPNs)</li> </ul>"},{"location":"security/#api-security","title":"API Security","text":"<ul> <li> Restrict API key permissions to required operations only</li> <li> Use IP whitelisting when possible</li> <li> Monitor API usage patterns</li> <li> Implement proper error handling without information leakage</li> <li> Regular security audits and updates</li> </ul>"},{"location":"security/#security-monitoring","title":"Security Monitoring","text":""},{"location":"security/#log-monitoring","title":"Log Monitoring","text":"<p>Monitor these security events in your logs:</p> <pre><code>SECURITY_EVENT: {\"event_type\": \"tool_invocation\", ...}\nSECURITY_EVENT: {\"event_type\": \"configuration_validated\", ...}\nSECURITY_EVENT: {\"event_type\": \"rate_limit_exceeded\", ...}\nSECURITY_EVENT: {\"event_type\": \"validation_error\", ...}\n</code></pre>"},{"location":"security/#common-security-patterns-to-watch","title":"Common Security Patterns to Watch","text":"<ol> <li>Repeated validation errors - Possible probing attempts</li> <li>Rate limit violations - Potential abuse or misconfiguration</li> <li>Large request patterns - Possible DoS attempts</li> <li>Unusual tool usage patterns - Possible unauthorized access</li> </ol>"},{"location":"security/#incident-response","title":"Incident Response","text":""},{"location":"security/#if-api-keys-are-compromised","title":"If API Keys Are Compromised","text":"<ol> <li>Immediately disable the compromised API key in Binance</li> <li>Generate new credentials with proper security</li> <li>Review audit logs for suspicious activity</li> <li>Update environment variables across all deployments</li> <li>Monitor account for unauthorized transactions</li> </ol>"},{"location":"security/#if-server-is-compromised","title":"If Server Is Compromised","text":"<ol> <li>Shut down the MCP server immediately</li> <li>Rotate all credentials (API keys, secrets)</li> <li>Review system logs for evidence of compromise</li> <li>Patch and update all dependencies</li> <li>Conduct security audit before restart</li> </ol>"},{"location":"security/#compliance-standards","title":"Compliance &amp; Standards","text":"<p>This implementation follows:</p> <ul> <li>MCP Protocol Security Guidelines</li> <li>OWASP API Security Top 10</li> <li>Financial Services Security Standards</li> <li>Python Security Best Practices</li> </ul>"},{"location":"security/#regular-security-maintenance","title":"Regular Security Maintenance","text":""},{"location":"security/#monthly-tasks","title":"Monthly Tasks","text":"<ul> <li> Review and rotate API credentials</li> <li> Update dependencies and security patches</li> <li> Audit security logs for anomalies</li> <li> Review and update security configurations</li> </ul>"},{"location":"security/#quarterly-tasks","title":"Quarterly Tasks","text":"<ul> <li> Conduct comprehensive security audit</li> <li> Review and update security documentation</li> <li> Penetration testing (if applicable)</li> <li> Security training updates</li> </ul>"},{"location":"security/#support-reporting","title":"Support &amp; Reporting","text":"<p>For security issues or questions:</p> <ul> <li>Create a security issue (mark as confidential)</li> <li>Email: dossehdosseh14@gmail.com</li> <li>Include: Detailed description, steps to reproduce, impact assessment</li> </ul> <p>\u26a0\ufe0f Remember: When in doubt about security, choose the more restrictive option.</p>"},{"location":"setup/","title":"Setup Guide","text":""},{"location":"setup/#installation","title":"Installation","text":""},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+ - Required for modern typing and async support</li> <li>Binance Account - With API access enabled</li> <li>API Credentials - API Key and Secret from Binance</li> </ul>"},{"location":"setup/#step-1-install-the-package","title":"Step 1: Install the Package","text":"<p>The easiest way to get started is by installing the official package from PyPI:</p> pip (Recommended)uv (Fast Package Manager)Development Installation <pre><code># Install the latest stable release\npip install binance-mcp-server\n</code></pre> <pre><code># Install using uv for fast, reliable package management\nuv add binance-mcp-server\n</code></pre> <pre><code># Only for contributors - regular users should use pip install above\ngit clone https://github.com/AnalyticAce/BinanceMCPServer.git\ncd BinanceMCPServer\npip install -e .\n</code></pre> <p>\ud83d\udca1 Benefits of PyPI Installation: - \u2705 Always the latest stable version - \u2705 Automatic dependency management - \u2705 Easy updates with <code>pip install --upgrade binance-mcp-server</code> - \u2705 No need to manage source code</p>"},{"location":"setup/#configuration","title":"Configuration","text":""},{"location":"setup/#step-2-binance-api-setup","title":"Step 2: Binance API Setup","text":"<ol> <li> <p>Login to Binance: Go to binance.com or binance.us</p> </li> <li> <p>Create API Key: </p> </li> <li>Navigate to Account \u2192 API Management</li> <li>Click \"Create API\" </li> <li> <p>Choose \"System generated\" API key</p> </li> <li> <p>Configure Permissions:    <pre><code>\u2705 Enable Reading      (Required for market data)\n\u2705 Enable Spot Trading (Required for trading operations)  \n\u2705 Enable Futures      (Optional, for futures trading)\n\u274c Enable Withdrawals  (Not recommended for security)\n</code></pre></p> </li> <li> <p>IP Restrictions (Recommended):</p> </li> <li>Add your server's IP address</li> <li>Use \"Restrict access to trusted IPs only\"</li> </ol>"},{"location":"setup/#step-3-environment-variables","title":"Step 3: Environment Variables","text":"<p>Set up your API credentials as environment variables:</p> Linux/macOSWindows (PowerShell).env File <pre><code># Required: Your Binance API credentials\nexport BINANCE_API_KEY=\"your_api_key_here\"\nexport BINANCE_API_SECRET=\"your_api_secret_here\"\n\n# Recommended: Use testnet for development\nexport BINANCE_TESTNET=\"true\"\n</code></pre> <pre><code># Required: Your Binance API credentials  \n$env:BINANCE_API_KEY=\"your_api_key_here\"\n$env:BINANCE_API_SECRET=\"your_api_secret_here\"\n\n# Recommended: Use testnet for development\n$env:BINANCE_TESTNET=\"true\"\n</code></pre> <pre><code># Create a .env file in your project directory\nBINANCE_API_KEY=your_api_key_here\nBINANCE_API_SECRET=your_api_secret_here\nBINANCE_TESTNET=true\n</code></pre>"},{"location":"setup/#configuration-options","title":"Configuration Options","text":"Variable Required Default Description <code>BINANCE_API_KEY</code> \u2705 Yes None Your Binance API key <code>BINANCE_API_SECRET</code> \u2705 Yes None Your Binance API secret <code>BINANCE_TESTNET</code> \u274c No <code>false</code> Use testnet environment"},{"location":"setup/#running-the-server","title":"Running the Server","text":""},{"location":"setup/#step-4-start-the-server","title":"Step 4: Start the Server","text":"STDIO (MCP Clients)HTTP (Testing)SSE (Server-Sent Events) <pre><code># Default mode for MCP clients (Claude, etc.) - using PyPI installation\nbinance-mcp-server\n\n# With custom log level\nbinance-mcp-server --log-level DEBUG\n</code></pre> <pre><code># For testing and development\nbinance-mcp-server --transport streamable-http --port 8000\n\n# Custom host and port\nbinance-mcp-server --transport streamable-http --host 0.0.0.0 --port 3000\n</code></pre> <pre><code># Server-sent events transport\nbinance-mcp-server --transport sse --port 8080\n</code></pre>"},{"location":"setup/#command-line-options","title":"Command Line Options","text":"<pre><code>binance-mcp-server [OPTIONS]\n\nOptions:\n  --api-key, -k TEXT               Binance API key (or set BINANCE_API_KEY env var)\n  --api-secret, -s TEXT            Binance API secret (or set BINANCE_API_SECRET env var)  \n  --binance-testnet, -t            Use testnet environment (recommended for testing)\n  --transport [stdio|streamable-http|sse]  Transport method (default: stdio)\n  --port INTEGER                   Port for HTTP transport (default: 8000)\n  --host TEXT                     Host for HTTP transport (default: localhost)\n  --log-level [DEBUG|INFO|WARNING|ERROR]  Set logging level (default: INFO)\n  --help                          Show help message\n</code></pre>"},{"location":"setup/#mcp-client-configuration","title":"MCP Client Configuration","text":""},{"location":"setup/#claude-desktop-configuration","title":"Claude Desktop Configuration","text":"<p>Add to your Claude Desktop configuration file:</p> macOSWindows <pre><code>// ~/Library/Application Support/Claude/claude_desktop_config.json\n{\n  \"mcpServers\": {\n    \"binance\": {\n      \"command\": \"binance-mcp-server\",\n      \"args\": [],\n      \"env\": {\n        \"BINANCE_API_KEY\": \"your_api_key_here\",\n        \"BINANCE_API_SECRET\": \"your_api_secret_here\",\n        \"BINANCE_TESTNET\": \"true\"\n      }\n    }\n  }\n}\n</code></pre> <pre><code>// %APPDATA%\\Claude\\claude_desktop_config.json\n{\n  \"mcpServers\": {\n    \"binance\": {\n      \"command\": \"binance-mcp-server\",\n      \"args\": [],\n      \"env\": {\n        \"BINANCE_API_KEY\": \"your_api_key_here\", \n        \"BINANCE_API_SECRET\": \"your_api_secret_here\",\n        \"BINANCE_TESTNET\": \"true\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"setup/#other-mcp-clients","title":"Other MCP Clients","text":"<p>For other MCP clients, use the STDIO transport:</p> <pre><code># Start server in STDIO mode\nbinance-mcp-server\n</code></pre> <p>The server will communicate via stdin/stdout for MCP protocol messages.</p>"},{"location":"setup/#verification","title":"Verification","text":""},{"location":"setup/#step-5-test-your-setup","title":"Step 5: Test Your Setup","text":"<p>Test the server connection:</p> HTTP TestingPython Testing <pre><code># Start server in HTTP mode\nbinance-mcp-server --transport streamable-http --port 8000\n\n# Test with curl (in another terminal)\ncurl -X POST http://localhost:8000/call \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"tool\": \"get_ticker_price\", \"arguments\": {\"symbol\": \"BTCUSDT\"}}'\n</code></pre> <pre><code>import os\nfrom binance_mcp_server.tools.get_ticker_price import get_ticker_price\n\n# Set environment variables\nos.environ[\"BINANCE_API_KEY\"] = \"your_key\"\nos.environ[\"BINANCE_API_SECRET\"] = \"your_secret\"\nos.environ[\"BINANCE_TESTNET\"] = \"true\"\n\n# Test a simple API call\nresult = get_ticker_price(\"BTCUSDT\")\nprint(f\"BTC Price: ${result['data']['price']}\")\n</code></pre>"},{"location":"setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"setup/#common-issues","title":"Common Issues","text":""},{"location":"setup/#configuration-errors","title":"\u274c Configuration Errors","text":"<p><pre><code>Error: Invalid Binance configuration: BINANCE_API_KEY environment variable is required\n</code></pre> Solution: Ensure environment variables are set correctly</p>"},{"location":"setup/#api-authentication-errors","title":"\u274c API Authentication Errors","text":"<p><pre><code>Error: API-key format invalid\n</code></pre> Solutions: - Verify API key and secret are correct - Check API key permissions in Binance account - Ensure IP restrictions allow your server IP</p>"},{"location":"setup/#rate-limit-errors","title":"\u274c Rate Limit Errors","text":"<p><pre><code>Error: API rate limit exceeded\n</code></pre> Solutions: - Wait a few minutes before retrying - Reduce request frequency - Contact Binance support for higher limits</p>"},{"location":"setup/#network-errors","title":"\u274c Network Errors","text":"<p><pre><code>Error: Connection timeout\n</code></pre> Solutions: - Check internet connectivity - Verify firewall settings - Try using testnet first</p>"},{"location":"setup/#testnet-vs-production","title":"Testnet vs Production","text":"Environment API Base URL Purpose Testnet <code>https://testnet.binance.vision</code> Development &amp; Testing Production <code>https://api.binance.com</code> Live Trading <p>Important</p> <p>Always start with testnet (<code>BINANCE_TESTNET=true</code>) for development and testing. Testnet uses fake money and allows safe experimentation.</p>"},{"location":"setup/#logging","title":"Logging","text":"<p>Enable debug logging for troubleshooting:</p> <pre><code>binance-mcp-server --log-level DEBUG\n</code></pre> <p>Log output includes: - API requests and responses - Rate limiting status - Error details and stack traces - Configuration validation results</p>"},{"location":"setup/#next-steps","title":"Next Steps","text":"<ul> <li>\ud83d\udcd6 API Reference - Learn about all available tools</li> <li>\ud83d\udca1 Examples - See practical usage examples</li> <li>\ud83c\udfd7\ufe0f Architecture - Understand the system design</li> <li>\ud83e\udd1d Contributing - Help improve the server</li> </ul>"},{"location":"suggested_mcp_tools/","title":"Suggested MCP Trading &amp; Finance Tools for Binance MCP Server","text":"<p>This document lists tools (features/modules/endpoints) for the Binance Model Context Protocol (MCP) server, each with a detailed name, description, and alternative nomenclature. All tools are strictly focused on trading and finance.</p>"},{"location":"suggested_mcp_tools/#1-get_balance","title":"1. get_balance","text":"<ul> <li>Purpose: Retrieve user\u2019s account balances (spot, margin, futures).</li> <li>Alternatives: fetch_account_balance, account_balance_info</li> </ul>"},{"location":"suggested_mcp_tools/#2-get_portfolio","title":"2. get_portfolio","text":"<ul> <li>Purpose: Fetch current holdings, open positions, and asset allocation.</li> <li>Alternatives: fetch_portfolio, portfolio_info</li> </ul>"},{"location":"suggested_mcp_tools/#3-get_market_data","title":"3. get_market_data","text":"<ul> <li>Purpose: Provide real-time and historical price, volume, and order book data.</li> <li>Alternatives: fetch_market_data, market_data_feed</li> </ul>"},{"location":"suggested_mcp_tools/#4-place_order","title":"4. place_order","text":"<ul> <li>Purpose: Submit new buy/sell orders (market, limit, stop, etc.).</li> <li>Alternatives: create_order, submit_order</li> </ul>"},{"location":"suggested_mcp_tools/#5-cancel_order","title":"5. cancel_order","text":"<ul> <li>Purpose: Cancel open orders by ID or symbol.</li> <li>Alternatives: remove_order, revoke_order</li> </ul>"},{"location":"suggested_mcp_tools/#6-get_order_status","title":"6. get_order_status","text":"<ul> <li>Purpose: Retrieve status and details of specific orders.</li> <li>Alternatives: fetch_order_status, order_info</li> </ul>"},{"location":"suggested_mcp_tools/#7-list_orders","title":"7. list_orders","text":"<ul> <li>Purpose: List all open, filled, or cancelled orders for a user.</li> <li>Alternatives: get_orders, fetch_order_list</li> </ul>"},{"location":"suggested_mcp_tools/#8-get_trade_history","title":"8. get_trade_history","text":"<ul> <li>Purpose: Fetch historical trades executed by the user.</li> <li>Alternatives: fetch_trade_history, trade_log</li> </ul>"},{"location":"suggested_mcp_tools/#9-get_funding_rates","title":"9. get_funding_rates","text":"<ul> <li>Purpose: Retrieve funding rates for futures/perpetual contracts.</li> <li>Alternatives: fetch_funding_rates, funding_info</li> </ul>"},{"location":"suggested_mcp_tools/#10-get_transaction_history","title":"10. get_transaction_history","text":"<ul> <li>Purpose: List deposits, withdrawals, and transfers.</li> <li>Alternatives: fetch_transaction_history, transaction_log</li> </ul>"},{"location":"suggested_mcp_tools/#11-get_pnl","title":"11. get_pnl","text":"<ul> <li>Purpose: Calculate and return realized/unrealized profit and loss.</li> <li>Alternatives: fetch_pnl, profit_and_loss</li> </ul>"},{"location":"suggested_mcp_tools/#12-get_risk_metrics","title":"12. get_risk_metrics","text":"<ul> <li>Purpose: Provide margin level, liquidation risk, and leverage info.</li> <li>Alternatives: fetch_risk_metrics, risk_info</li> </ul>"},{"location":"suggested_mcp_tools/#13-get_fee_info","title":"13. get_fee_info","text":"<ul> <li>Purpose: Retrieve trading, withdrawal, and funding fee rates.</li> <li>Alternatives: fetch_fee_info, fee_rates</li> </ul>"},{"location":"suggested_mcp_tools/#14-get_ticker","title":"14. get_ticker","text":"<ul> <li>Purpose: Fetch latest price and 24h stats for a symbol.</li> <li>Alternatives: fetch_ticker, ticker_info</li> </ul>"},{"location":"suggested_mcp_tools/#15-get_order_book","title":"15. get_order_book","text":"<ul> <li>Purpose: Retrieve current order book (bids/asks) for a symbol.</li> <li>Alternatives: fetch_order_book, orderbook_info</li> </ul>"},{"location":"suggested_mcp_tools/#16-get_position_info","title":"16. get_position_info","text":"<ul> <li>Purpose: Get details on open positions (size, entry, liquidation).</li> <li>Alternatives: fetch_position_info, position_details</li> </ul>"},{"location":"suggested_mcp_tools/#17-get_leverage_brackets","title":"17. get_leverage_brackets","text":"<ul> <li>Purpose: Fetch allowed leverage and margin requirements.</li> <li>Alternatives: fetch_leverage_brackets, leverage_info</li> </ul>"},{"location":"suggested_mcp_tools/#18-get_asset_price","title":"18. get_asset_price","text":"<ul> <li>Purpose: Retrieve current or historical price for a specific asset.</li> <li>Alternatives: fetch_asset_price, asset_price_info</li> </ul>"},{"location":"suggested_mcp_tools/#19-get_account_snapshot","title":"19. get_account_snapshot","text":"<ul> <li>Purpose: Get a point-in-time snapshot of account state.</li> <li>Alternatives: fetch_account_snapshot, account_state</li> </ul>"},{"location":"suggested_mcp_tools/#20-get_margin_interest","title":"20. get_margin_interest","text":"<ul> <li>Purpose: Retrieve interest rates and accrued interest for margin trading.</li> <li>Alternatives: fetch_margin_interest, margin_interest_info</li> </ul>"},{"location":"suggested_mcp_tools/#21-get_liquidation_history","title":"21. get_liquidation_history","text":"<ul> <li>Purpose: List past liquidation events for the account.</li> <li>Alternatives: fetch_liquidation_history, liquidation_log</li> </ul>"},{"location":"suggested_mcp_tools/#22-get_dividends","title":"22. get_dividends","text":"<ul> <li>Purpose: Retrieve dividend payments and history for assets.</li> <li>Alternatives: fetch_dividends, dividend_history</li> </ul>"},{"location":"suggested_mcp_tools/#23-get_borrow_history","title":"23. get_borrow_history","text":"<ul> <li>Purpose: Fetch history of borrowed funds and repayments (margin/futures).</li> <li>Alternatives: fetch_borrow_history, borrow_log</li> </ul>"},{"location":"suggested_mcp_tools/#24-get_asset_transfer","title":"24. get_asset_transfer","text":"<ul> <li>Purpose: Retrieve and initiate asset transfers between accounts (spot, margin, futures).</li> <li>Alternatives: fetch_asset_transfer, transfer_funds</li> </ul>"},{"location":"suggested_mcp_tools/#25-get_withdrawal_status","title":"25. get_withdrawal_status","text":"<ul> <li>Purpose: Check status of withdrawal requests.</li> <li>Alternatives: fetch_withdrawal_status, withdrawal_info</li> </ul>"},{"location":"suggested_mcp_tools/#26-get_available_assets","title":"26. get_available_assets","text":"<ul> <li>Purpose: Retrieve the list of available assets and their names.</li> <li>Alternatives: fetch_available_assets, asset_list, list_assets</li> </ul> <p>These tool names and alternatives are designed for clarity, maintainability, and direct relevance to trading and finance for developers integrating with the Binance MCP server.</p>"}]}